{"version":3,"file":"AccountReconnect.js","sourceRoot":"","sources":["../../ts/components/AccountReconnect.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAA;AACjD,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAA;AACxC,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAA;AAChD,OAAO,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAA;AAC5D,OAAO,EAAE,aAAa,EAAE,MAAM,gCAAgC,CAAA;AAC9D,OAAO,EAAE,eAAe,EAAE,MAAM,cAAc,CAAA;AAE9C,MAAM,CAAC,MAAM,gBAAgB,GAAG,GAAG,EAAE;IACpC,MAAM,EAAE,eAAe,EAAE,GAAG,mBAAmB,EAAE,CAAA;IACjD,MAAM,EAAE,OAAO,EAAE,GAAG,SAAS,EAAE,CAAA;IAC/B,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,aAAa,EAAmB,CAAA;IAElE,MAAM,gBAAgB,GAAG,GAAG,EAAE;QAC7B,IAAI,CAAC,eAAe,CAAC,KAAK;YAAE,OAAM;QAClC,MAAM,QAAQ,GAAG,eAAe,CAAC,KAAK,CAAA;QACtC,OAAO,CAAC,KAAK,IAAI,EAAE;YAClB,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,QAAQ,CAAC,YAAY,EAAE,CAAA;YAC9C,OAAO,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;QAC7C,CAAC,CAAC,CAAA;IACH,CAAC,CAAA;IAED,MAAM,qBAAqB,GAAG,GAAG,EAAE;QAClC,8DAA8D;QAC9D,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,KAAK,UAAU;YAAE,OAAM;QAC5C,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAA;IAC5B,CAAC,CAAA;IAED,eAAe,CAAC,qBAAqB,CAAC,CAAA;IACtC,SAAS,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAA;IAE/B,OAAO,mBAAK,CAAA;AACb,CAAC,CAAA","sourcesContent":["import { useSignalEffect } from '@preact/signals'\nimport { useEffect } from 'preact/hooks'\nimport { useWallet } from '../context/Wallet.js'\nimport { useEthereumProvider } from '../context/Ethereum.js'\nimport { useAsyncState } from '../library/preact-utilities.js'\nimport { EthereumAddress } from '../schema.js'\n\nexport const AccountReconnect = () => {\n\tconst { browserProvider } = useEthereumProvider()\n\tconst { account } = useWallet()\n\tconst { value: query, waitFor } = useAsyncState<EthereumAddress>()\n\n\tconst attemptToConnect = () => {\n\t\tif (!browserProvider.value) return\n\t\tconst provider = browserProvider.value\n\t\twaitFor(async () => {\n\t\t\tconst [signer] = await provider.listAccounts()\n\t\t\treturn EthereumAddress.parse(signer.address)\n\t\t})\n\t}\n\n\tconst listenForQueryChanges = () => {\n\t\t// do not reset shared state for other instances of this hooks\n\t\tif (query.value.state === 'inactive') return\n\t\taccount.value = query.value\n\t}\n\n\tuseSignalEffect(listenForQueryChanges)\n\tuseEffect(attemptToConnect, [])\n\n\treturn <></>\n}\n"]}