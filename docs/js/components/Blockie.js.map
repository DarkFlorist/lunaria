{"version":3,"file":"Blockie.js","sourceRoot":"","sources":["../../ts/components/Blockie.tsx"],"names":[],"mappings":"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","sourcesContent":["// ported directly from https://github.com/DarkFlorist/TheInterceptor\nimport { useRef, useEffect } from 'preact/hooks'\n\ninterface BlockieProps {\n\tseed: string\n\tscale?: number\n\tborderRadius?: string\n}\n\nconst defaultSize = 8\nconst defaultScale = 4\n\nfunction generateIdenticon(options: BlockieProps, canvasRef: HTMLCanvasElement) {\n\t// NOTE -- Majority of this code is referenced from: https://github.com/alexvandesande/blockies\n\t// Mostly to ensure congruence to Ethereum Mist's Identicons\n\n\t// The random number is a js implementation of the Xorshift PRNG\n\tconst randseed = new Array(4) // Xorshift: [x, y, z, w] 32 bit values\n\n\tfunction seedrand(seed: string) {\n\t\tfor (let i = 0; i < randseed.length; i++) {\n\t\t\trandseed[i] = 0\n\t\t}\n\t\tfor (let i = 0; i < seed.length; i++) {\n\t\t\trandseed[i % 4] = (randseed[i % 4] << 5) - randseed[i % 4] + seed.charCodeAt(i)\n\t\t}\n\t}\n\n\tfunction rand() {\n\t\t// based on Java's String.hashCode(), expanded to 4 32bit values\n\t\tconst t = randseed[0] ^ (randseed[0] << 11)\n\n\t\trandseed[0] = randseed[1]\n\t\trandseed[1] = randseed[2]\n\t\trandseed[2] = randseed[3]\n\t\trandseed[3] = randseed[3] ^ (randseed[3] >> 19) ^ t ^ (t >> 8)\n\n\t\treturn (randseed[3] >>> 0) / ((1 << 31) >>> 0)\n\t}\n\n\tfunction createColor() {\n\t\t// saturation is the whole color spectrum\n\t\tconst h = Math.floor(rand() * 360)\n\t\t// saturation goes from 40 to 100, it avoids greyish colors\n\t\tconst s = rand() * 60 + 40 + '%'\n\t\t// lightness can be anything from 0 to 100, but probabilities are a bell curve around 50%\n\t\tconst l = (rand() + rand() + rand() + rand()) * 25 + '%'\n\n\t\tconst color = 'hsl(' + h + ',' + s + ',' + l + ')'\n\t\treturn color\n\t}\n\n\tfunction createImageData(size: number) {\n\t\tconst width = size // Only support square icons for now\n\t\tconst height = size\n\n\t\tconst dataWidth = Math.ceil(width / 2)\n\t\tconst mirrorWidth = width - dataWidth\n\n\t\tconst data = []\n\t\tfor (let y = 0; y < height; y++) {\n\t\t\tlet row = []\n\t\t\tfor (let x = 0; x < dataWidth; x++) {\n\t\t\t\t// this makes foreground and background color to have a 43% (1/2.3) probability\n\t\t\t\t// spot color has 13% chance\n\t\t\t\trow[x] = Math.floor(rand() * 2.3)\n\t\t\t}\n\t\t\tconst r = row.slice(0, mirrorWidth)\n\t\t\tr.reverse()\n\t\t\trow = row.concat(r)\n\n\t\t\tfor (let i = 0; i < row.length; i++) {\n\t\t\t\tdata.push(row[i])\n\t\t\t}\n\t\t}\n\n\t\treturn data\n\t}\n\n\tfunction setCanvas(identicon: HTMLCanvasElement, imageData: number[], color: string, scale: number, bgcolor: string, spotcolor: string) {\n\t\tconst width = Math.sqrt(imageData.length)\n\t\tconst size = width * scale\n\n\t\tidenticon.width = size\n\t\tidenticon.style.width = `${size}px`\n\n\t\tidenticon.height = size\n\t\tidenticon.style.height = `${size}px`\n\n\t\tconst cc = identicon.getContext('2d')\n\t\tcc!.fillStyle = bgcolor\n\t\tcc!.fillRect(0, 0, identicon.width, identicon.height)\n\t\tcc!.fillStyle = color\n\n\t\tfor (let i = 0; i < imageData.length; i++) {\n\t\t\t// if data is 2, choose spot color, if 1 choose foreground\n\t\t\tcc!.fillStyle = imageData[i] === 1 ? color : spotcolor\n\n\t\t\t// if data is 0, leave the background\n\t\t\tif (imageData[i]) {\n\t\t\t\tconst row = Math.floor(i / width)\n\t\t\t\tconst col = i % width\n\n\t\t\t\tcc!.fillRect(col * scale, row * scale, scale, scale)\n\t\t\t}\n\t\t}\n\t}\n\n\tconst scale = options.scale || defaultScale\n\tconst seed = options.seed.toLocaleLowerCase()\n\n\tseedrand(seed)\n\n\tconst color = createColor()\n\tconst bgcolor = createColor()\n\tconst spotcolor = createColor()\n\tconst imageData = createImageData(defaultSize)\n\tconst canvas = setCanvas(canvasRef, imageData, color, scale, bgcolor, spotcolor)\n\n\treturn canvas\n}\n\nexport default function Blockie(props: BlockieProps) {\n\tconst canvasRef = useRef<HTMLCanvasElement>(null)\n\tuseEffect(() => {\n\t\tif (canvasRef.current) {\n\t\t\tgenerateIdenticon(props, canvasRef.current)\n\t\t}\n\t}, [props.seed])\n\tconst dimension = defaultSize * (props.scale || 4)\n\treturn (\n\t\t<canvas\n\t\t\tref={canvasRef}\n\t\t\tstyle={{\n\t\t\t\twidth: `${dimension}px`,\n\t\t\t\theight: `${dimension}px`,\n\t\t\t\tborderRadius: props.borderRadius ? props.borderRadius : '0%',\n\t\t\t}}\n\t\t/>\n\t)\n}\n"]}