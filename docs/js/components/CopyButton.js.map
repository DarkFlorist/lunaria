{"version":3,"file":"CopyButton.js","sourceRoot":"","sources":["../../ts/components/CopyButton.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,SAAS,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAA;AAE5D,OAAO,EAAE,eAAe,EAAE,MAAM,4BAA4B,CAAA;AAC5D,OAAO,KAAK,IAAI,MAAM,iBAAiB,CAAA;AASvC,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,EAAmB,EAAE,EAAE;IAC1E,MAAM,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC,CAAA;IACjC,MAAM,EAAE,MAAM,EAAE,GAAG,eAAe,EAAE,CAAA;IACpC,MAAM,QAAQ,GAAG,KAAK,IAAI,SAAS,CAAA;IAEnC,MAAM,WAAW,GAAG,KAAK,IAAI,EAAE;QAC9B,MAAM,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;QAC1C,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAA;IACtB,CAAC,CAAA;IAED,eAAe,CAAC,GAAG,EAAE;QACpB,IAAI,QAAQ,CAAC,KAAK,KAAK,IAAI;YAAE,OAAM;QACnC,UAAU,CAAC,GAAG,EAAE;YACf,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAA;QACvB,CAAC,EAAE,IAAI,CAAC,CAAA;IACT,CAAC,CAAC,CAAA;IAEF,eAAe,CAAC,GAAG,EAAE;QACpB,IAAI,CAAC,QAAQ,CAAC,KAAK;YAAE,OAAM;QAC3B,MAAM,CAAC,EAAE,OAAO,EAAE,8CAA8C,EAAE,KAAK,EAAE,0BAA0B,EAAE,CAAC,CAAA;IACvG,CAAC,CAAC,CAAA;IAEF,IAAI,QAAQ,CAAC,KAAK,EAAE;QACnB,OAAO,MAAC,MAAM,IAAC,OAAO,EAAE,WAAW,EAAE,QAAQ,mBAAC,KAAC,IAAI,CAAC,KAAK,KAAG,OAAE,QAAQ,CAAC,CAAC,CAAC,sCAAqB,CAAC,CAAC,CAAC,mBAAK,SAAW,CAAA;KACjH;IAED,OAAO,MAAC,MAAM,IAAC,OAAO,EAAE,WAAW,aAAE,KAAC,IAAI,CAAC,IAAI,KAAG,EAAC,QAAQ,CAAC,CAAC,CAAC,mCAAkB,CAAC,CAAC,CAAC,mBAAK,IAAU,CAAA;AACnG,CAAC,CAAA;AAED,MAAM,MAAM,GAAG,CAAC,EAAE,QAAQ,EAAE,GAAG,KAAK,EAAyC,EAAE,EAAE;IAChF,OAAO,CACN,iBAAQ,IAAI,EAAC,QAAQ,EAAC,KAAK,EAAC,MAAM,EAAC,KAAK,EAAC,wMAAwM,KAAM,KAAK,YAC1P,QAAQ,GACD,CACT,CAAA;AACF,CAAC,CAAA","sourcesContent":["import { useSignal, useSignalEffect } from '@preact/signals'\nimport { ComponentChild, JSX } from 'preact'\nimport { useNotification } from '../context/Notification.js'\nimport * as Icon from './Icon/index.js'\n\ntype CopyButtonProps = {\n\tvalue: string\n\twithLabel?: boolean\n\t// for deprecation: use `withLabel` to display text label\n\tlabel?: ComponentChild\n}\n\nexport const CopyButton = ({ value, label, withLabel }: CopyButtonProps) => {\n\tconst isCopied = useSignal(false)\n\tconst { notify } = useNotification()\n\tconst hasLabel = label || withLabel\n\n\tconst handleClick = async () => {\n\t\tawait navigator.clipboard.writeText(value)\n\t\tisCopied.value = true\n\t}\n\n\tuseSignalEffect(() => {\n\t\tif (isCopied.value !== true) return\n\t\tsetTimeout(() => {\n\t\t\tisCopied.value = false\n\t\t}, 1000)\n\t})\n\n\tuseSignalEffect(() => {\n\t\tif (!isCopied.value) return\n\t\tnotify({ message: 'Copied information may contain private data.', title: 'Copied text to clipboard' })\n\t})\n\n\tif (isCopied.value) {\n\t\treturn <Button onClick={handleClick} disabled><Icon.Check /> {hasLabel ? <span>copied! </span> : <></>} </Button>\n\t}\n\n\treturn <Button onClick={handleClick}><Icon.Copy />{hasLabel ? <span>copy </span> : <></>}</Button>\n}\n\nconst Button = ({ children, ...props }: JSX.HTMLAttributes<HTMLButtonElement>) => {\n\treturn (\n\t\t<button type='button' title='Copy' class='text-xs text-white/50 bg-white/10 px-3 h-8 uppercase whitespace-nowrap flex gap-1 items-center focus:text-white hover:text-white hover:bg-white/20 disabled:text-white/30 disabled:hover:text-white/30' { ...props }>\n\t\t\t{children}\n\t\t</button>\n\t)\n}\n"]}