{"version":3,"file":"Router.js","sourceRoot":"","sources":["../../ts/components/Router.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAuB,YAAY,EAAS,MAAM,QAAQ,CAAA;AACjE,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAA;AACxC,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAA;AAYxC,MAAM,WAAW,GAAG,MAAM,CAAc,EAAE,QAAQ,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAA;AAExE,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,EAAE,QAAQ,EAAe,EAAE,EAAE;IACnD,SAAS,CAAC,GAAG,EAAE;QACd,MAAM,OAAO,GAA6B;YACzC,KAAK,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE;gBACpC,MAAM,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,QAAqC,CAAC,CAAA;gBAC5E,2CAA2C;gBAC3C,WAAW,CAAC,KAAK,GAAG,EAAE,GAAG,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAA;gBACnE,OAAO,OAAO,CAAA;YACf,CAAC;SACD,CAAA;QAED,oCAAoC;QACpC,OAAO,CAAC,SAAS,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,CAAA;QAEzD,uCAAuC;QACvC,OAAO,CAAC,YAAY,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,EAAE,OAAO,CAAC,CAAA;QAE/D,MAAM,cAAc,GAAG,CAAC,KAAoB,EAAE,EAAE;YAC/C,WAAW,CAAC,KAAK,GAAG;gBACnB,GAAG,WAAW,CAAC,KAAK;gBACpB,QAAQ,EAAG,KAAK,CAAC,KAAqB,EAAE,QAAQ,IAAI,GAAG;aACvD,CAAA;QACF,CAAC,CAAA;QAED,iDAAiD;QACjD,gBAAgB,CAAC,UAAU,EAAE,cAAc,CAAC,CAAA;QAC5C,OAAO,GAAG,EAAE,CAAC,mBAAmB,CAAC,UAAU,EAAE,cAAc,CAAC,CAAA;IAC7D,CAAC,EAAE,EAAE,CAAC,CAAA;IAEN,MAAM,aAAa,GAAG,YAAY,CAAC,QAAQ,CAAwB,CAAA;IACnE,MAAM,eAAe,GAAG,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA;IAEtG,OAAO,4BAAG,eAAe,GAAI,CAAA;AAC9B,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,KAAK,GAAG,CAAC,EAAE,SAAS,EAAE,SAAS,EAAc,EAAE,EAAE,CAAC,KAAC,SAAS,KAAG,CAAA;AAE5E,MAAM,UAAU,QAAQ;IACvB,MAAM,QAAQ,GAAG,CAAC,QAAgB,EAAE,OAAiB,EAAE,UAAoB,EAAE,EAAE;QAC9E,IAAI,QAAQ,KAAK,QAAQ,CAAC,QAAQ;YAAE,OAAM;QAE1C,IAAI,OAAO,EAAE;YACZ,OAAO,CAAC,YAAY,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;YAC5D,OAAM;SACN;QAED,OAAO,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;IAC1D,CAAC,CAAA;IAED,OAAO;QACN,MAAM,EAAE,WAAW;QACnB,QAAQ;KACR,CAAA;AACF,CAAC;AAGD,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,EAAE,EAAE,EAAE,OAAO,GAAG,IAAI,EAAiB,EAAE,EAAE;IACjE,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,EAAE,CAAA;IAC/B,QAAQ,CAAC,EAAE,EAAE,OAAO,CAAC,CAAA;IACrB,OAAO,IAAI,CAAA;AACZ,CAAC,CAAA","sourcesContent":["import { FunctionalComponent, toChildArray, VNode } from 'preact'\nimport { signal } from '@preact/signals'\nimport { useEffect } from 'preact/hooks'\n\ntype RouteProps = { path: string; component: FunctionalComponent }\ntype RouterProps = {\n\tchildren: VNode<RouteProps> | VNode<RouteProps>[]\n}\n\ntype HistoryStateProxyHandler = ProxyHandler<typeof history.pushState | typeof history.replaceState>\ntype RouterState = {\n\tpathname: string\n}\n\nconst routerState = signal<RouterState>({ pathname: location.pathname })\n\nexport const Router = ({ children }: RouterProps) => {\n\tuseEffect(() => {\n\t\tconst handler: HistoryStateProxyHandler = {\n\t\t\tapply: (target, thisArg, argArray) => {\n\t\t\t\tconst applied = target.apply(thisArg, argArray as Parameters<typeof target>)\n\t\t\t\t// set router routerState on history change\n\t\t\t\trouterState.value = { ...routerState.value, pathname: argArray[2] }\n\t\t\t\treturn applied\n\t\t\t},\n\t\t}\n\n\t\t// listen for changes from pushState\n\t\thistory.pushState = new Proxy(history.pushState, handler)\n\n\t\t// listen for changes from replaceState\n\t\thistory.replaceState = new Proxy(history.replaceState, handler)\n\n\t\tconst handlePopState = (event: PopStateEvent) => {\n\t\t\trouterState.value = {\n\t\t\t\t...routerState.value,\n\t\t\t\tpathname: (event.state as RouterState)?.pathname || '/',\n\t\t\t}\n\t\t}\n\n\t\t// listen for forward and back button interaction\n\t\taddEventListener('popstate', handlePopState)\n\t\treturn () => removeEventListener('popstate', handlePopState)\n\t}, [])\n\n\tconst childrenArray = toChildArray(children) as VNode<RouteProps>[]\n\tconst visibleChildren = childrenArray.filter(child => child.props.path === routerState.value.pathname)\n\n\treturn <>{visibleChildren}</>\n}\n\nexport const Route = ({ component: Component }: RouteProps) => <Component />\n\nexport function useRoute() {\n\tconst navigate = (pathname: string, replace?: boolean, skipRender?: boolean) => {\n\t\tif (pathname === location.pathname) return\n\n\t\tif (replace) {\n\t\t\thistory.replaceState({ pathname, skipRender }, '', pathname)\n\t\t\treturn\n\t\t}\n\n\t\thistory.pushState({ pathname, skipRender }, '', pathname)\n\t}\n\n\treturn {\n\t\trouter: routerState,\n\t\tnavigate,\n\t}\n}\n\ntype RedirectProps = { to: string; replace?: boolean }\nexport const Redirect = ({ to, replace = true }: RedirectProps) => {\n\tconst { navigate } = useRoute()\n\tnavigate(to, replace)\n\treturn null\n}\n"]}