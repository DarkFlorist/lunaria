{"version":3,"file":"SVGBlockie.js","sourceRoot":"","sources":["../../ts/components/SVGBlockie.tsx"],"names":[],"mappings":"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","sourcesContent":["// ported directly from https://github.com/DarkFlorist/TheInterceptor\n\nimport { useMemo } from 'preact/hooks'\n\nfunction generateIdenticon(options: { seed: string; size?: number }) {\n\t// NOTE -- Majority of this code is referenced from: https://github.com/alexvandesande/blockies\n\t// Mostly to ensure congruence to Ethereum Mist's Identicons\n\n\t// The random number is a js implementation of the Xorshift PRNG\n\tconst randseed = new Array(4) // Xorshift: [x, y, z, w] 32 bit values\n\n\tfunction seedrand(seed: string) {\n\t\tfor (let i = 0; i < randseed.length; i++) {\n\t\t\trandseed[i] = 0\n\t\t}\n\t\tfor (let i = 0; i < seed.length; i++) {\n\t\t\trandseed[i % 4] = (randseed[i % 4] << 5) - randseed[i % 4] + seed.charCodeAt(i)\n\t\t}\n\t}\n\n\tfunction rand() {\n\t\t// based on Java's String.hashCode(), expanded to 4 32bit values\n\t\tconst t = randseed[0] ^ (randseed[0] << 11)\n\n\t\trandseed[0] = randseed[1]\n\t\trandseed[1] = randseed[2]\n\t\trandseed[2] = randseed[3]\n\t\trandseed[3] = randseed[3] ^ (randseed[3] >> 19) ^ t ^ (t >> 8)\n\n\t\treturn (randseed[3] >>> 0) / ((1 << 31) >>> 0)\n\t}\n\n\tfunction createColor() {\n\t\t// saturation is the whole color spectrum\n\t\tconst h = Math.floor(rand() * 360)\n\t\t// saturation goes from 40 to 100, it avoids greyish colors\n\t\tconst s = rand() * 60 + 40 + '%'\n\t\t// lightness can be anything from 0 to 100, but probabilities are a bell curve around 50%\n\t\tconst l = (rand() + rand() + rand() + rand()) * 25 + '%'\n\n\t\tconst color = 'hsl(' + h + ',' + s + ',' + l + ')'\n\t\treturn color\n\t}\n\n\tfunction createImageData(size: number) {\n\t\tconst width = size // Only support square icons for now\n\t\tconst height = size\n\n\t\tconst dataWidth = Math.ceil(width / 2)\n\t\tconst mirrorWidth = width - dataWidth\n\n\t\tconst data = []\n\t\tfor (let y = 0; y < height; y++) {\n\t\t\tlet row = []\n\t\t\tfor (let x = 0; x < dataWidth; x++) {\n\t\t\t\t// this makes foreground and background color to have a 43% (1/2.3) probability\n\t\t\t\t// spot color has 13% chance\n\t\t\t\trow[x] = Math.floor(rand() * 2.3)\n\t\t\t}\n\t\t\tconst r = row.slice(0, mirrorWidth)\n\t\t\tr.reverse()\n\t\t\trow = row.concat(r)\n\n\t\t\tfor (let i = 0; i < row.length; i++) {\n\t\t\t\tdata.push(row[i])\n\t\t\t}\n\t\t}\n\n\t\treturn data\n\t}\n\n\tconst seed = options.seed.toLocaleLowerCase()\n\n\tseedrand(seed)\n\n\tconst color = createColor()\n\tconst bgcolor = createColor()\n\tconst spotcolor = createColor()\n\tconst imageData = createImageData(options.size || 8)\n\n\treturn { imageData, color, bgcolor, spotcolor }\n}\n\n// SVGBlockie component is resizable through CSS font size\nexport default function SVGBlockie({ address }: { address: string }) {\n\tconst pixelDensity = 8\n\tconst { imageData, color, spotcolor, bgcolor } = useMemo(() => generateIdenticon({ seed: address, size: pixelDensity }), [address])\n\n\treturn (\n\t\t<svg width='1em' height='1em' viewBox='0 0 64 64' xmlns='http://www.w3.org/2000/svg'>\n\t\t\t{imageData.map((data, index) => {\n\t\t\t\tconst fill = data === 0 ? bgcolor : data === 1 ? color : spotcolor\n\t\t\t\tconst pixelSize = 64 / pixelDensity\n\n\t\t\t\treturn <rect width={pixelSize} height={pixelSize} x={((index % pixelDensity) * 64) / pixelDensity} y={Math.floor(index / pixelDensity) * pixelSize} fill={fill} />\n\t\t\t})}\n\t\t</svg>\n\t)\n}\n"]}