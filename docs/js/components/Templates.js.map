{"version":3,"file":"Templates.js","sourceRoot":"","sources":["../../ts/components/Templates.tsx"],"names":[],"mappings":"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","sourcesContent":["import { useComputed, useSignal } from '@preact/signals'\nimport { formatEther, formatUnits } from 'ethers'\nimport { useTokenManager } from '../context/TokenManager.js'\nimport { useTemplates } from '../context/TransferTemplates.js'\nimport { removeNonStringsAndTrim } from '../library/utilities.js'\nimport { TransferTemplate } from '../schema.js'\nimport * as Icon from './Icon/index.js'\n\nexport const Templates = () => {\n\tconst manage = useSignal(false)\n\tconst { cache: templatesCache } = useTemplates()\n\tconst { cache: tokensCache } = useTokenManager()\n\n\tconst templates = useComputed(() => templatesCache.value.data)\n\tconst getCachedToken = (contractAddress: string) => tokensCache.value.data.find(token => token.address === contractAddress)\n\n\tif (templates.value.length < 1)\n\t\treturn (\n\t\t\t<div class='pl-4 mb-4'>\n\t\t\t\t<div class='flex justify-between'>\n\t\t\t\t\t<div class='text-white/30 text-sm mb-2'>Saved Transfers</div>\n\t\t\t\t</div>\n\t\t\t\t<div class='border border-white/30 border-dashed px-4 py-3'>\n\t\t\t\t\t<p class='text-white/50 text-sm'>Tip: You can save completed transfers so you don't have to fill out the form everytime.</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\n\treturn (\n\t\t<div class='pl-4 mb-4'>\n\t\t\t<div class='flex justify-between'>\n\t\t\t\t<div class='text-white/30 text-sm mb-2'>Saved Transfers</div>\n\t\t\t\t<button class='text-xs mb-2 uppercase' onClick={() => (manage.value = !manage.value)}>\n\t\t\t\t\t{manage.value ? 'done' : 'manage'}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div class='grid gap-2'>\n\t\t\t\t{templates.value.map((template, index) => {\n\t\t\t\t\tconst token = template.contractAddress && getCachedToken(template.contractAddress)\n\t\t\t\t\tconst amount = token ? formatUnits(template.quantity, token.decimals) : formatEther(template.quantity)\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<a class={removeNonStringsAndTrim('grid gap-2 items-center bg-white/10 px-4 py-3', manage.value ? 'grid-cols-[min-content,minmax(0,1fr),min-content]' : 'grid-cols-1 hover:bg-white/30')} href={`#saved/${index}`}>\n\t\t\t\t\t\t\t<MoveUpButton show={manage.value === true} template={template} index={index} />\n\t\t\t\t\t\t\t<div class='grid gap-2 grid-cols-[auto,minmax(0,1fr)] items-center'>\n\t\t\t\t\t\t\t\t{token ? <img class='w-8 h-8' src={`/img/${token.address.toLowerCase()}.svg`} /> : <img class='w-8 h-8' src={`/img/ethereum.svg`} />}\n\t\t\t\t\t\t\t\t<div class='text-left'>\n\t\t\t\t\t\t\t\t\t<div>{template.label}</div>\n\t\t\t\t\t\t\t\t\t<div class='overflow-hidden text-ellipsis whitespace-nowrap text-sm text-white/50'>\n\t\t\t\t\t\t\t\t\t\t{amount} {token ? token.symbol : 'ETH'} to {template.to}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<RemoveButton show={manage.value === true} index={index} />\n\t\t\t\t\t\t</a>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\ntype PromoteButtonProps = {\n\tshow: boolean\n\ttemplate: TransferTemplate\n\tindex: number\n}\n\nconst MoveUpButton = (props: PromoteButtonProps) => {\n\tconst { cache } = useTemplates()\n\tconst templates = useComputed(() => cache.value.data)\n\n\tconst swapIndex = (indexA: number, indexB: number) => {\n\t\t// ignore same indices swap\n\t\tif (indexA === indexB) return\n\n\t\tconst orderedTemplates = [...templates.value]\n\n\t\tconst tempA = orderedTemplates[indexA]\n\t\torderedTemplates[indexA] = orderedTemplates[indexB]\n\t\torderedTemplates[indexB] = tempA\n\n\t\tcache.value = { ...cache.peek(), data: orderedTemplates }\n\t}\n\n\tif (!props.show) return <></>\n\tif (props.index === 0) return <div></div>\n\n\treturn (\n\t\t<button class='text-lg' onClick={() => swapIndex(props.index, props.index - 1)}>\n\t\t\t<Icon.ArrowUp />\n\t\t</button>\n\t)\n}\n\ntype RemoveButtonProps = {\n\tshow: boolean\n\tindex: number\n}\n\nconst RemoveButton = (props: RemoveButtonProps) => {\n\tconst { cache } = useTemplates()\n\n\tconst remove = (index: number) => {\n\t\tconst newData = [...cache.value.data.slice(0, index), ...cache.value.data.slice(index + 1)]\n\t\tcache.value = { ...cache.peek(), data: newData }\n\t}\n\n\tif (!props.show) return <></>\n\n\treturn (\n\t\t<button class='text-sm' onClick={() => remove(props.index)}>\n\t\t\t<Icon.Xmark />\n\t\t</button>\n\t)\n}\n"]}