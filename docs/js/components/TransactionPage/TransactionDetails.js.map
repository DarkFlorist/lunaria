{"version":3,"file":"TransactionDetails.js","sourceRoot":"","sources":["../../../ts/components/TransactionPage/TransactionDetails.tsx"],"names":[],"mappings":"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","sourcesContent":["import { useSignalEffect } from '@preact/signals'\nimport { formatEther, formatUnits } from 'ethers'\nimport SVGBlockie from '../SVGBlockie.js'\nimport { useRouter } from '../HashRouter.js'\nimport { TemplateRecorder } from '../TemplateRecorder.js'\nimport { Info, InfoError, InfoPending } from './Info.js'\nimport { useTransaction } from '../TransactionProvider.js'\nimport { EthereumAddress, TransferRequest } from '../../schema.js'\nimport { extractERC20TransferRequest } from '../../library/ethereum.js'\nimport { useTokenManager } from '../../context/TokenManager.js'\n\nexport const TransactionDetails = () => {\n\tconst router = useRouter<{ transaction_hash: string }>()\n\tconst { transactionHash } = useTransaction()\n\n\tuseSignalEffect(() => {\n\t\ttransactionHash.value = router.value.params.transaction_hash\n\t})\n\n\treturn (\n\t\t<div class='grid gap-2'>\n\t\t\t<TransactionHash />\n\t\t\t<TransferFrom />\n\t\t\t<TransferTo />\n\t\t\t<TransferAmount />\n\t\t\t<TransferFee />\n\t\t\t<TemplateRecorder />\n\t\t</div>\n\t)\n}\n\nconst TransactionHash = () => {\n\tconst { transactionHash } = useTransaction()\n\tif (!transactionHash.value) return <></>\n\treturn <Info label='Hash' value={transactionHash.value} allowCopy />\n}\n\nconst TransferFrom = () => {\n\tconst { response } = useTransaction()\n\n\tswitch (response.value.state) {\n\t\tcase 'inactive':\n\t\t\treturn <></>\n\t\tcase 'pending':\n\t\t\treturn <InfoPending />\n\t\tcase 'rejected':\n\t\t\treturn <InfoError displayText='Failed to load information' message={response.value.error.message} />\n\t\tcase 'resolved':\n\t\t\tconst from = response.value.value?.from\n\t\t\tif (from === undefined) return <></>\n\t\t\tconst blockieIcon = () => (\n\t\t\t\t<span class='text-4xl'>\n\t\t\t\t\t<SVGBlockie address={from} />\n\t\t\t\t</span>\n\t\t\t)\n\t\t\treturn <Info label='From' value={from} icon={blockieIcon} allowCopy />\n\t}\n}\n\nconst TransferTo = () => {\n\tconst { receipt } = useTransaction()\n\n\tswitch (receipt.value.state) {\n\t\tcase 'inactive':\n\t\t\treturn <></>\n\t\tcase 'pending':\n\t\t\treturn <InfoPending />\n\t\tcase 'rejected':\n\t\t\treturn <InfoError displayText='Failed to load information' message={receipt.value.error.message} />\n\t\tcase 'resolved':\n\t\t\tconst txReceipt = receipt.value.value\n\t\t\tif (txReceipt === null) return <></>\n\n\t\t\tconst extractedRequest = extractERC20TransferRequest(txReceipt)\n\t\t\tif (extractedRequest) return <TokenRecipient transferRequest={extractedRequest} />\n\n\t\t\treturn <EthRecipient />\n\t}\n}\n\nconst TokenRecipient = ({ transferRequest }: { transferRequest: ReturnType<typeof extractERC20TransferRequest> }) => {\n\t// loading states are handled by the parent component\n\tconst parsedERC20Request = TransferRequest.safeParse(transferRequest)\n\tif (!parsedERC20Request.success) return <InfoError displayText='Failed to extract recipient address from transfer details.' message={parsedERC20Request.message} />\n\n\tconst Blockie = () => <span class='text-4xl'><SVGBlockie address={parsedERC20Request.value.to} /></span>\n\treturn <Info label='To' value={parsedERC20Request.value.to} icon={Blockie} allowCopy />\n}\n\nconst EthRecipient = () => {\n\tconst { response } = useTransaction()\n\n\t// loading states are handled by the parent component\n\tif (response.value.state !== 'resolved') return <></>\n\n\tconst txResponse = response.value.value\n\tif (!txResponse) return <></>\n\n\tconst parsedTo = EthereumAddress.safeParse(txResponse.to)\n\tif (!parsedTo.success) return <InfoError displayText='Failed to extract recipient address' message={parsedTo.message} />\n\n\tconst blockieIcon = () => <span class='text-4xl'><SVGBlockie address={parsedTo.value} /></span>\n\treturn <Info label='To' value={parsedTo.value} icon={blockieIcon} allowCopy />\n}\n\nconst TransferAmount = () => {\n\tconst { receipt } = useTransaction()\n\n\tswitch (receipt.value.state) {\n\t\tcase 'inactive':\n\t\t\treturn <></>\n\t\tcase 'pending':\n\t\t\treturn <InfoPending />\n\t\tcase 'rejected':\n\t\t\treturn <InfoError displayText='Failed to load information' message={receipt.value.error.message} />\n\t\tcase 'resolved':\n\t\t\tconst txReceipt = receipt.value.value\n\t\t\tif (txReceipt === null) return <></>\n\n\t\t\tconst extractedRequest = extractERC20TransferRequest(txReceipt)\n\t\t\tif (extractedRequest) return <TokenAmount transferRequest={extractedRequest} />\n\n\t\t\treturn <EthAmount />\n\t}\n}\n\nconst TokenAmount = ({ transferRequest }: { transferRequest: ReturnType<typeof extractERC20TransferRequest> }) => {\n\tconst { cache } = useTokenManager()\n\n\tconst parsedERC20Request = TransferRequest.safeParse(transferRequest)\n\tif (!parsedERC20Request.success) return <InfoError displayText='Failed to extract amount from transfer info' message={parsedERC20Request.message} />\n\n\tconst getTokenMetaFromCache = (address: EthereumAddress) => cache.value.data.find(token => token.address === address)\n\n\tconst token = parsedERC20Request.value.contractAddress ? getTokenMetaFromCache(parsedERC20Request.value.contractAddress) : undefined\n\tif (!token) return <InfoError displayText='The token is not on your token list' message={`Contract ${parsedERC20Request.value.contractAddress} does not exist on your token list.`} />\n\n\tconst displayAmount = `${formatUnits(parsedERC20Request.value.quantity, token.decimals)} ${token.symbol}`\n\treturn <Info label='Amount' value={displayAmount} />\n}\n\nconst EthAmount = () => {\n\tconst { response } = useTransaction()\n\n\tswitch (response.value.state) {\n\t\tcase 'inactive':\n\t\t\treturn <></>\n\t\tcase 'pending':\n\t\t\treturn <InfoPending />\n\t\tcase 'rejected':\n\t\t\treturn <InfoError displayText='Failed to load information' message={response.value.error.message} />\n\t\tcase 'resolved':\n\t\t\tconst txResponse = response.value.value\n\t\t\tif (txResponse === null) return <></>\n\t\t\tconst displayValue = `${formatEther(txResponse.value)} ETH`\n\t\t\treturn <Info label='Amount' value={displayValue} />\n\t}\n}\n\n\nconst TransferFee = () => {\n\tconst { receipt } = useTransaction()\n\n\tswitch (receipt.value.state) {\n\t\tcase 'inactive':\n\t\t\treturn <></>\n\t\tcase 'pending':\n\t\t\treturn <InfoPending />\n\t\tcase 'rejected':\n\t\t\treturn <InfoError displayText='Failed to load information' message={receipt.value.error.message} />\n\t\tcase 'resolved':\n\t\t\tif (receipt.value.value === null) return <></>\n\t\t\tconst transactionFee = `${formatEther(receipt.value.value.fee)} ETH`\n\t\t\treturn <Info label='Transaction Fee' value={transactionFee} />\n\t}\n}\n"]}