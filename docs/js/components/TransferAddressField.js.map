{"version":3,"file":"TransferAddressField.js","sourceRoot":"","sources":["../../ts/components/TransferAddressField.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAA;AAC7C,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAA;AACpD,OAAO,EAAE,YAAY,EAAE,MAAM,gCAAgC,CAAA;AAC7D,OAAO,EAAE,eAAe,EAAE,MAAM,cAAc,CAAA;AAC9C,OAAO,KAAK,IAAI,MAAM,iBAAiB,CAAA;AAEvC,MAAM,CAAC,MAAM,oBAAoB,GAAG,GAAG,EAAE;IACxC,MAAM,QAAQ,GAAG,WAAW,EAAE,CAAA;IAC9B,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,YAAY,CAA0B,IAAI,CAAC,CAAA;IAE7E,MAAM,UAAU,GAAG,GAAG,EAAE;QACvB,IAAI,QAAQ,CAAC,KAAK,EAAE;YACnB,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAA;YACzB,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,OAAO,CAAC,CAAA;YAC1C,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAA;YACxC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,CAAA;SACtB;IACF,CAAC,CAAA;IAED,MAAM,UAAU,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,CAAC,CAAA;IAEpE,MAAM,aAAa,GAAG,CAAC,KAAY,EAAE,EAAE;QACtC,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,YAAY,gBAAgB,CAAC;YAAE,OAAM;QACvD,MAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAAA;QAC/B,MAAM,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,CAAA;QAE1C,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,EAAE,UAAU,EAAE,CAAA;QAClE,MAAM,aAAa,GAAG,eAAe,CAAC,SAAS,CAAC,UAAU,CAAC,CAAA;QAE3D,IAAI,aAAa,CAAC,OAAO,EAAE;YAC1B,KAAK,CAAC,MAAM,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAA;YAClC,OAAM;SACN;QAED,UAAU,CAAC,iBAAiB,CAAC,aAAa,CAAC,OAAO,CAAC,CAAA;IACpD,CAAC,CAAA;IAED,OAAO,CACN,qCAAyB,UAAU,CAAC,KAAK,EAAE,KAAK,EAAC,yNAAyN,aACzQ,gBAAO,KAAK,EAAC,wDAAwD,mBAAW,EAChF,gBAAO,GAAG,EAAE,GAAG,EAAE,IAAI,EAAC,MAAM,EAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,OAAO,EAAE,aAAa,EAAE,QAAQ,QAAC,WAAW,EAAC,WAAW,EAAC,KAAK,EAAC,kJAAkJ,GAAG,EACjR,KAAC,WAAW,IAAC,OAAO,EAAE,UAAU,GAAI,IAC1B,CACX,CAAA;AACF,CAAC,CAAA;AAED,MAAM,WAAW,GAAG,CAAC,EAAE,OAAO,EAA2B,EAAE,EAAE;IAC5D,OAAO,CACN,iBAAQ,IAAI,EAAC,QAAQ,EAAC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAC,+NAA+N,YAC5Q,KAAC,IAAI,CAAC,KAAK,KAAG,GACN,CACT,CAAA;AACF,CAAC,CAAA","sourcesContent":["import { useComputed } from '@preact/signals'\nimport { useTransfer } from '../context/Transfer.js'\nimport { useSignalRef } from '../library/preact-utilities.js'\nimport { EthereumAddress } from '../schema.js'\nimport * as Icon from './Icon/index.js'\n\nexport const TransferAddressField = () => {\n\tconst transfer = useTransfer()\n\tconst { ref, signal: inputRef } = useSignalRef<HTMLInputElement | null>(null)\n\n\tconst clearValue = () => {\n\t\tif (inputRef.value) {\n\t\t\tinputRef.value.value = ''\n\t\t\tconst inputEvent = new InputEvent('input')\n\t\t\tinputRef.value.dispatchEvent(inputEvent)\n\t\t\tinputRef.value.focus()\n\t\t}\n\t}\n\n\tconst isPristine = useComputed(() => transfer.input.value.to === '')\n\n\tconst validateInput = (event: Event) => {\n\t\tif (!(event.target instanceof HTMLInputElement)) return\n\t\tconst inputField = event.target\n\t\tconst fieldValue = inputField.value.trim()\n\n\t\ttransfer.input.value = { ...transfer.input.value, to: fieldValue }\n\t\tconst parsedAddress = EthereumAddress.safeParse(fieldValue)\n\n\t\tif (parsedAddress.success) {\n\t\t\tevent.target.setCustomValidity('')\n\t\t\treturn\n\t\t}\n\n\t\tinputField.setCustomValidity(parsedAddress.message)\n\t}\n\n\treturn (\n\t\t<fieldset data-pristine={isPristine.value} class='px-4 py-3 relative grid gap-2 grid-cols-1 grid-flow-col-dense items-center border border-white/50 focus-within:border-white disabled:bg-white/10 disabled:border-white/30 modified:enabled:invalid:border-red-400 group'>\n\t\t\t<label class='absolute top-2 left-4 text-sm text-white/50 capitalize'>to</label>\n\t\t\t<input ref={ref} type='text' value={transfer.input.value.to} onInput={validateInput} required placeholder='0x0123...' class='peer outline-none pt-4 bg-transparent text-ellipsis disabled:text-white/30 placeholder:text-white/20 group-modified:enabled:invalid:text-red-400' />\n\t\t\t<ClearButton onClick={clearValue} />\n\t\t</fieldset>\n\t)\n}\n\nconst ClearButton = ({ onClick }: { onClick: () => void }) => {\n\treturn (\n\t\t<button type='button' onClick={onClick} class='outline-none w-8 h-8 flex items-center justify-center border border-white/50 text-white/50 peer-placeholder-shown:hidden peer-disabled:hidden focus:text-white focus:border-white hover:text-white hover:border-white text-xs'>\n\t\t\t<Icon.Xmark />\n\t\t</button>\n\t)\n}\n"]}