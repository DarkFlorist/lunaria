{"version":3,"file":"TransferAmountField.js","sourceRoot":"","sources":["../../ts/components/TransferAmountField.tsx"],"names":[],"mappings":"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","sourcesContent":["import { batch, useComputed, useSignal, useSignalEffect } from '@preact/signals'\nimport { formatUnits, parseUnits } from 'ethers'\nimport { useBalance } from '../context/Wallet.js'\nimport { useTransfer } from '../context/Transfer.js'\nimport { useSignalRef } from '../library/preact-utilities.js'\nimport * as Icon from './Icon/index.js'\n\nexport const TransferAmountField = () => {\n\tconst { input, safeParse } = useTransfer()\n\tconst isPristine = useSignal<true | undefined>(true)\n\tconst { ref, signal: inputRef } = useSignalRef<HTMLInputElement | null>(null)\n\n\tconst normalizeAndUpdateValue = (newValue: string) => {\n\t\tbatch(() => {\n\t\t\tisPristine.value = undefined\n\t\t\tinput.value = { ...input.value, amount: newValue.trim() }\n\t\t})\n\t}\n\n\tconst clearValue = () => {\n\t\tif (inputRef.value) {\n\t\t\tinputRef.value.value = ''\n\t\t\tconst inputEvent = new InputEvent('input')\n\t\t\tinputRef.value.dispatchEvent(inputEvent)\n\t\t\tinputRef.value.focus()\n\t\t}\n\t}\n\n\tconst validationMessage = useComputed(() => {\n\t\tconst safeParsedInput = safeParse.value\n\t\tif (safeParsedInput.success || safeParsedInput.key !== 'amount') return undefined\n\t\treturn 'Amount should be a number.'\n\t})\n\n\tconst validateField = () => {\n\t\tif (inputRef.value === null) return\n\t\tif (validationMessage.value === undefined) {\n\t\t\tinputRef.value.setCustomValidity('')\n\t\t\treturn\n\t\t}\n\n\t\tinputRef.value.setCustomValidity(validationMessage.value)\n\t}\n\n\tuseSignalEffect(validateField)\n\n\treturn (\n\t\t<fieldset data-pristine={isPristine.value} class='px-4 py-3 relative grid gap-2 grid-cols-1 grid-flow-col-dense items-center border border-white/50 focus-within:border-white disabled:bg-white/10 disabled:border-white/30 modified:enabled:invalid:border-red-400'>\n\t\t\t<label class='absolute top-2 left-4 text-sm text-white/50 capitalize'>amount</label>\n\t\t\t<input ref={ref} type='text' value={input.value.amount} onInput={e => normalizeAndUpdateValue(e.currentTarget.value)} required placeholder='1.00' class='peer outline-none pt-4 bg-transparent text-ellipsis disabled:text-white/30 placeholder:text-white/20' />\n\t\t\t<MaxButton />\n\t\t\t<ClearButton onClick={clearValue} />\n\t\t</fieldset>\n\t)\n}\n\nconst MaxButton = () => {\n\tconst { balance, token } = useBalance()\n\tconst { input } = useTransfer()\n\n\tconst resolvedBalance = useComputed(() => balance.value.state === 'resolved' ? balance.value.value : undefined)\n\n\tconst setMaxAmount = async () => {\n\t\tconst amount = formatUnits(resolvedBalance.value || 0n, input.value.token?.decimals)\n\t\tinput.value = Object.assign({}, input.peek(), { amount })\n\t}\n\n\tconst isInputAmountAtMax = useComputed(() => {\n\t\ttry {\n\t\t\tconst amount = parseUnits(input.value.amount, input.value.token?.decimals)\n\t\t\treturn resolvedBalance.value === amount\n\t\t} catch {\n\t\t\treturn false\n\t\t}\n\t})\n\n\tuseSignalEffect(() => {\n\t\ttoken.value = input.value.token\n\t})\n\n\tif (!input.value.token || isInputAmountAtMax.value) return <></>\n\n\tswitch (balance.value.state) {\n\t\tcase 'inactive':\n\t\tcase 'rejected':\n\t\t\treturn <></>\n\t\tcase 'pending':\n\t\t\treturn <><Icon.Spinner class='opacity-50' /> <div class='text-xs text-white/50 flex flex-col'><span>checking</span><span>balance</span></div></>\n\t\tcase 'resolved':\n\t\t\treturn (\n\t\t\t\t<button type='button' onClick={setMaxAmount} class='outline-none px-2 h-8 items-center justify-center border border-white/50 text-white/50 peer-disabled:hidden focus:text-white focus:border-white hover:text-white hover:border-white'>\n\t\t\t\t\tmax\n\t\t\t\t</button>\n\t\t\t)\n\t}\n}\n\nconst ClearButton = ({ onClick }: { onClick: () => void }) => {\n\treturn (\n\t\t<button type='button' onClick={onClick} class='outline-none w-8 h-8 flex items-center justify-center border border-white/50 text-white/50 peer-placeholder-shown:hidden peer-disabled:hidden focus:text-white focus:border-white hover:text-white hover:border-white text-xs'>\n\t\t\t<Icon.Xmark />\n\t\t</button>\n\t)\n}\n"]}