{"version":3,"file":"TransferRecorder.js","sourceRoot":"","sources":["../../ts/components/TransferRecorder.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,WAAW,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAA;AAC9D,OAAO,EAAE,kBAAkB,EAAE,MAAM,+BAA+B,CAAA;AAClE,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAA;AACpD,OAAO,EAAE,eAAe,EAAY,MAAM,cAAc,CAAA;AAExD,MAAM,CAAC,MAAM,gBAAgB,GAAG,GAAG,EAAE;IACpC,MAAM,OAAO,GAAG,kBAAkB,EAAE,CAAA;IACpC,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,GAAG,WAAW,EAAE,CAAA;IAEhD,MAAM,oBAAoB,GAAG,CAAC,QAAkB,EAAE,EAAE;QACnD,OAAO,CAAC,KAAK,GAAG,EAAE,GAAG,OAAO,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAA;IACpF,CAAC,CAAA;IAED,MAAM,kBAAkB,GAAG,WAAW,CAAC,GAAG,EAAE;QAC3C,IAAI,WAAW,CAAC,KAAK,CAAC,KAAK,KAAK,UAAU;YAAE,OAAM;QAClD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO;YAAE,OAAM;QAEpC,MAAM,MAAM,GAAG,SAAS,CAAC,KAAK,CAAC,KAAK,CAAA;QACpC,MAAM,kBAAkB,GAAG,WAAW,CAAC,KAAK,CAAC,KAAK,CAAA;QAElD,OAAO;YACN,IAAI,EAAE,eAAe,CAAC,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC;YACpD,EAAE,EAAE,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;YACpC,MAAM,EAAE,MAAM,CAAC,MAAM;YACrB,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE;YAChB,IAAI,EAAE,kBAAkB,CAAC,IAAI;YAC7B,KAAK,EAAE,MAAM,CAAC,KAAK;SACnB,CAAA;IACF,CAAC,CAAC,CAAA;IAEF,MAAM,wBAAwB,GAAG,GAAG,EAAE;QACrC,IAAI,kBAAkB,CAAC,KAAK,KAAK,SAAS;YAAE,OAAM;QAClD,oBAAoB,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAA;IAC/C,CAAC,CAAA;IAED,eAAe,CAAC,wBAAwB,CAAC,CAAA;IAEzC,OAAO,mBAAK,CAAA;AACb,CAAC,CAAA","sourcesContent":["import { useComputed, useSignalEffect } from '@preact/signals'\nimport { useTransferHistory } from '../context/TransferHistory.js'\nimport { useTransfer } from '../context/Transfer.js'\nimport { EthereumAddress, Transfer } from '../schema.js'\n\nexport const TransferRecorder = () => {\n\tconst history = useTransferHistory()\n\tconst { safeParse, transaction } = useTransfer()\n\n\tconst addTransferToHistory = (transfer: Transfer) => {\n\t\thistory.value = { ...history.peek(), data: history.peek().data.concat([transfer]) }\n\t}\n\n\tconst successfulTransfer = useComputed(() => {\n\t\tif (transaction.value.state !== 'resolved') return\n\t\tif (!safeParse.value.success) return\n\n\t\tconst inputs = safeParse.value.value\n\t\tconst currentTransaction = transaction.value.value\n\n\t\treturn {\n\t\t\tfrom: EthereumAddress.parse(currentTransaction.from),\n\t\t\tto: EthereumAddress.parse(inputs.to),\n\t\t\tamount: inputs.amount,\n\t\t\tdate: Date.now(),\n\t\t\thash: currentTransaction.hash,\n\t\t\ttoken: inputs.token,\n\t\t}\n\t})\n\n\tconst listenAndRecordTransfers = () => {\n\t\tif (successfulTransfer.value === undefined) return\n\t\taddTransferToHistory(successfulTransfer.value)\n\t}\n\n\tuseSignalEffect(listenAndRecordTransfers)\n\n\treturn <></>\n}\n"]}