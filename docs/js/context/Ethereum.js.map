{"version":3,"file":"Ethereum.js","sourceRoot":"","sources":["../../ts/context/Ethereum.tsx"],"names":[],"mappings":"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","sourcesContent":["import { ComponentChildren, createContext } from 'preact'\nimport { useContext, useEffect, useRef } from 'preact/hooks'\nimport { Signal, useSignal, useSignalEffect } from '@preact/signals'\nimport { BrowserProvider, Network } from 'ethers'\nimport { isEthereumProvider, withEip1193Provider } from '../library/ethereum.js'\nimport { AsyncProperty, useAsyncState } from '../library/preact-utilities.js'\nimport { BigIntHex } from '../schema.js'\n\ntype EthereumProviderContext = {\n\tbrowserProvider: Signal<BrowserProvider | undefined>\n\tnetwork: Signal<AsyncProperty<Network>>\n\tblockNumber: Signal<number | undefined>\n}\n\nexport const EthereumProviderContext = createContext<EthereumProviderContext | undefined>(undefined)\nexport const EthereumProvider = ({ children }: { children: ComponentChildren }) => {\n\tconst browserProvider = useSignal<BrowserProvider | undefined>(undefined)\n\tconst network = useSignal<AsyncProperty<Network>>({ state: 'inactive' })\n\tconst blockNumber = useSignal<number | undefined>(undefined)\n\n\treturn (\n\t\t<EthereumProviderContext.Provider value={{ browserProvider, network, blockNumber }}>\n\t\t\t<BrowserProviderUpdater />\n\t\t\t<BlockUpdater />\n\t\t\t<NetworkUpdater />\n\t\t\t<>{children}</>\n\t\t</EthereumProviderContext.Provider>\n\t)\n}\n\nexport function useEthereumProvider() {\n\tconst context = useContext(EthereumProviderContext)\n\tif (context === undefined) throw new Error('useEthereumProvider can only be used within children of EthereumProvider')\n\treturn context\n}\n\nconst BrowserProviderUpdater = () => {\n\tconst { browserProvider } = useEthereumProvider()\n\n\tconst setBrowserProvider = (chainIdHex?: string) => {\n\t\tif (!withEip1193Provider(window)) return\n\t\tconst chainId = chainIdHex ? BigIntHex.parse(chainIdHex) : undefined\n\t\tbrowserProvider.value = new BrowserProvider(window.ethereum, chainId)\n\t}\n\n\tconst addChainChangeListener = () => {\n\t\tif (!withEip1193Provider(window)) return\n\t\tif (!isEthereumProvider(window.ethereum)) return\n\t\twindow.ethereum.on('chainChanged', setBrowserProvider)\n\t}\n\n\tuseEffect(() => {\n\t\tsetBrowserProvider()\n\t\taddChainChangeListener()\n\t}, [])\n\n\treturn <></>\n}\n\nconst BlockUpdater = () => {\n\tconst { browserProvider, blockNumber } = useEthereumProvider()\n\tconst { value: query, waitFor } = useAsyncState<number>()\n\tconst previousProvider = useRef<BrowserProvider | undefined>(undefined)\n\n\tconst updateBlock = (newBlockNumber: number) => blockNumber.value = newBlockNumber\n\n\tconst addBlockListener = async (provider: BrowserProvider) => {\n\t\tif (previousProvider.current) previousProvider.current.removeListener('block', updateBlock)\n\t\tpreviousProvider.current = await provider.on('block', updateBlock)\n\t}\n\n\tconst providerChangeEffect = () => {\n\t\tif (!browserProvider.value) return\n\t\tconst provider = browserProvider.value\n\t\twaitFor(async () => await provider.getBlockNumber())\n\t\taddBlockListener(provider)\n\t}\n\n\tconst queryChangeEffect = () => {\n\t\tif (query.value.state !== 'resolved') return\n\t\tblockNumber.value = query.value.value\n\t}\n\n\tuseSignalEffect(providerChangeEffect)\n\tuseSignalEffect(queryChangeEffect)\n\n\treturn <></>\n}\n\nconst NetworkUpdater = () => {\n\tconst { browserProvider, network } = useEthereumProvider()\n\tconst { value: query, waitFor } = useAsyncState<Network>()\n\n\tconst providerChangeEffect = () => {\n\t\tif (!browserProvider.value) return\n\t\tconst provider = browserProvider.value\n\t\twaitFor(async () => provider.getNetwork())\n\t}\n\n\tconst queryChangeEffect = () => {\n\t\tnetwork.value = query.value\n\t}\n\n\tuseSignalEffect(providerChangeEffect)\n\tuseSignalEffect(queryChangeEffect)\n\n\treturn <></>\n}\n"]}