{"version":3,"file":"TokenManager.js","sourceRoot":"","sources":["../../ts/context/TokenManager.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAU,SAAS,EAAE,MAAM,iBAAiB,CAAA;AACnD,OAAO,EAAqB,aAAa,EAAE,MAAM,QAAQ,CAAA;AACzD,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAA;AACzC,OAAO,EAAE,iBAAiB,EAAe,iBAAiB,EAAE,MAAM,cAAc,CAAA;AAChF,OAAO,EAAE,cAAc,EAAE,sBAAsB,EAAE,MAAM,yBAAyB,CAAA;AAChF,OAAO,EAAE,mBAAmB,EAAE,MAAM,iCAAiC,CAAA;AAQrE,MAAM,CAAC,MAAM,mBAAmB,GAAG,aAAa,CAAkC,SAAS,CAAC,CAAA;AAE5F,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,EAAE,QAAQ,EAAmC,EAAE,EAAE;IACrF,MAAM,KAAK,GAAG,SAAS,CAAC,EAAE,CAAC,CAAA;IAC3B,MAAM,KAAK,GAAG,SAAS,CAAC,SAAS,CAAC,CAAA;IAClC,MAAM,KAAK,GAAG,SAAS,CAAc,EAAE,IAAI,EAAE,cAAc,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAA;IAEhF,mBAAmB,CAAC,sBAAsB,EAAE,KAAK,EAAE,iBAAiB,CAAC,iBAAiB,CAAC,CAAC,CAAA;IAExF,OAAO,KAAC,mBAAmB,CAAC,QAAQ,IAAC,KAAK,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,YAAG,QAAQ,GAAgC,CAAA;AAC/G,CAAC,CAAA;AAED,MAAM,UAAU,eAAe;IAC9B,MAAM,OAAO,GAAG,UAAU,CAAC,mBAAmB,CAAC,CAAA;IAC/C,IAAI,OAAO,KAAK,SAAS;QAAE,MAAM,IAAI,KAAK,CAAC,0EAA0E,CAAC,CAAA;IACtH,OAAO,OAAO,CAAA;AACf,CAAC","sourcesContent":["import { Signal, useSignal } from '@preact/signals'\nimport { ComponentChildren, createContext } from 'preact'\nimport { useContext } from 'preact/hooks'\nimport { createCacheParser, TokensCache, TokensCacheSchema } from '../schema.js'\nimport { DEFAULT_TOKENS, KNOWN_TOKENS_CACHE_KEY } from '../library/constants.js'\nimport { persistSignalEffect } from '../library/persistent-signal.js'\n\nexport type TokenManagerContext = {\n\tcache: Signal<TokensCache>\n\tquery: Signal<string>\n\tstage: Signal<'select' | 'add' | undefined>\n}\n\nexport const TokenManagerContext = createContext<TokenManagerContext | undefined>(undefined)\n\nexport const TokenManagerProvider = ({ children }: { children: ComponentChildren }) => {\n\tconst query = useSignal('')\n\tconst stage = useSignal(undefined)\n\tconst cache = useSignal<TokensCache>({ data: DEFAULT_TOKENS, version: '1.0.0' })\n\n\tpersistSignalEffect(KNOWN_TOKENS_CACHE_KEY, cache, createCacheParser(TokensCacheSchema))\n\n\treturn <TokenManagerContext.Provider value={{ cache, query, stage }}>{children}</TokenManagerContext.Provider>\n}\n\nexport function useTokenManager() {\n\tconst context = useContext(TokenManagerContext)\n\tif (context === undefined) throw new Error('useTokenManager can only be used within children of TokenManagerProvider')\n\treturn context\n}\n"]}