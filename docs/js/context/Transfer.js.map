{"version":3,"file":"Transfer.js","sourceRoot":"","sources":["../../ts/context/Transfer.tsx"],"names":[],"mappings":";AAAA,OAAO,EAA0B,WAAW,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAA;AAEhF,OAAO,KAAK,QAAQ,MAAM,UAAU,CAAA;AACpC,OAAO,EAAqB,aAAa,EAAE,MAAM,QAAQ,CAAA;AACzD,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAA;AAEzC,OAAO,EAAE,gBAAgB,EAAE,aAAa,EAAE,UAAU,EAAE,oBAAoB,EAAE,MAAM,cAAc,CAAA;AAWhG,MAAM,CAAC,MAAM,eAAe,GAAG,aAAa,CAA8B,SAAS,CAAC,CAAA;AAEpF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,EAAE,QAAQ,EAAmC,EAAE,EAAE;IACjF,MAAM,WAAW,GAAG,SAAS,CAAqC,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,CAAA;IACxF,MAAM,KAAK,GAAG,SAAS,CAAe,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAA;IAC/E,MAAM,MAAM,GAAG,SAAS,CAAC,KAAK,CAAC,CAAA;IAE/B,MAAM,YAAY,GAAG,WAAW,CAAC,GAAG,EAAE;QACrC,MAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAA;QACzF,OAAO,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;IAC7C,CAAC,CAAC,CAAA;IAEF,MAAM,eAAe,GAAG,WAAW,CAAC,GAAG,EAAE;QACxC,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,KAAK,SAAS;YAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAwC,CAAA;QACrH,OAAO,aAAa,CAAC,UAAU,EAAE,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;IACpD,CAAC,CAAC,CAAA;IAEF,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE;QAClC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO;YAAE,OAAO,EAAE,GAAG,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAA;QAChF,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,OAAO;YAAE,OAAO,EAAE,GAAG,eAAe,CAAC,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,CAAA;QACrF,MAAM,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC,KAAK,CAAA;QACvC,MAAM,KAAK,GAAG,eAAe,CAAC,KAAK,CAAC,KAAK,CAAA;QACzC,OAAO,oBAAoB,CAAC,SAAS,CAAC,EAAE,GAAG,KAAK,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAA;IACzE,CAAC,CAAC,CAAA;IAEF,OAAO,KAAC,eAAe,CAAC,QAAQ,IAAC,KAAK,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,EAAE,YAAG,QAAQ,GAA4B,CAAA;AACzH,CAAC,CAAA;AAED,MAAM,UAAU,WAAW;IAC1B,MAAM,OAAO,GAAG,UAAU,CAAC,eAAe,CAAC,CAAA;IAC3C,IAAI,CAAC,OAAO;QAAE,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAA;IACjG,OAAO,OAAO,CAAA;AACf,CAAC","sourcesContent":["import { Signal, ReadonlySignal, useComputed, useSignal } from '@preact/signals'\nimport { TransactionResponse } from 'ethers'\nimport * as funtypes from 'funtypes'\nimport { ComponentChildren, createContext } from 'preact'\nimport { useContext } from 'preact/hooks'\nimport { AsyncProperty } from '../library/preact-utilities.js'\nimport { createUnitParser, safeSerialize, ERC20Token, TransferRequestInput } from '../schema.js'\n\ntype PartialInput = { to: string; amount: string; token: ERC20Token | undefined }\n\ntype TransferContext = {\n\tinput: Signal<PartialInput>\n\tsafeParse: ReadonlySignal<funtypes.Result<TransferRequestInput>>\n\ttransaction: Signal<AsyncProperty<TransactionResponse>>\n\tisBusy: Signal<boolean>\n}\n\nexport const TransferContext = createContext<TransferContext | undefined>(undefined)\n\nexport const TransferProvider = ({ children }: { children: ComponentChildren }) => {\n\tconst transaction = useSignal<AsyncProperty<TransactionResponse>>({ state: 'inactive' })\n\tconst input = useSignal<PartialInput>({ to: '', amount: '', token: undefined })\n\tconst isBusy = useSignal(false)\n\n\tconst parsedAmount = useComputed(() => {\n\t\tconst HexUnit = funtypes.String.withParser(createUnitParser(input.value.token?.decimals))\n\t\treturn HexUnit.safeParse(input.value.amount)\n\t})\n\n\tconst serializedToken = useComputed(() => {\n\t\tif (input.value.token === undefined) return { success: true, value: undefined } satisfies funtypes.Success<undefined>\n\t\treturn safeSerialize(ERC20Token, input.value.token)\n\t})\n\n\tconst safeParse = useComputed(() => {\n\t\tif (!parsedAmount.value.success) return { ...parsedAmount.value, key: 'amount' }\n\t\tif (!serializedToken.value.success) return { ...serializedToken.value, key: 'token' }\n\t\tconst amount = parsedAmount.value.value\n\t\tconst token = serializedToken.value.value\n\t\treturn TransferRequestInput.safeParse({ ...input.value, amount, token })\n\t})\n\n\treturn <TransferContext.Provider value={{ input, safeParse, transaction, isBusy }}>{children}</TransferContext.Provider>\n}\n\nexport function useTransfer() {\n\tconst context = useContext(TransferContext)\n\tif (!context) throw new Error('useTransfer can only be used within children of TransferProvider')\n\treturn context\n}\n"]}