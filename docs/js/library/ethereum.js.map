{"version":3,"file":"ethereum.js","sourceRoot":"","sources":["../../ts/library/ethereum.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,EAAE,EAA8D,UAAU,EAAE,MAAM,QAAQ,CAAA;AAC9G,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAA;AASxC,MAAM,UAAU,mBAAmB,CAAC,MAAe;IAClD,OAAO,MAAM,KAAK,IAAI,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,UAAU,IAAI,MAAM,IAAI,MAAM,CAAC,QAAQ,KAAK,IAAI,IAAI,OAAO,MAAM,CAAC,QAAQ,KAAK,QAAQ,IAAI,SAAS,IAAI,MAAM,CAAC,QAAQ,IAAI,OAAO,MAAM,CAAC,QAAQ,CAAC,OAAO,KAAK,UAAU,CAAA;AACjO,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,QAAiB;IACnD,OAAO,QAAQ,KAAK,IAAI,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,IAAI,IAAI,QAAQ,IAAI,OAAO,QAAQ,CAAC,EAAE,KAAK,UAAU,IAAI,gBAAgB,IAAI,QAAQ,IAAI,OAAO,QAAQ,CAAC,cAAc,KAAK,UAAU,CAAA;AACnM,CAAC;AAED,MAAM,CAAC,MAAM,cAAc,GAAG,IAAI,SAAS,CAAC,QAAQ,CAAC,CAAA;AACrD,MAAM,CAAC,MAAM,iBAAiB,GAAG,EAAE,CAAC,mCAAmC,CAAC,CAAA;AAExE,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,KAAK,KAAK,iBAAiB,CAAA;AAE7E,MAAM,CAAC,MAAM,cAAc,GAAG,IAAI,SAAS,CAAC,QAAQ,CAAC,CAAA;AAErD,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,EAAE,MAAM,EAAE,IAAI,EAAO,EAAE,EAAE,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,CAAC,GAAG,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC,CAAA;AAErH,MAAM,UAAU,2BAA2B,CAAC,OAA2B;IACtE,kCAAkC;IAClC,IAAI,CAAC,OAAO,CAAC,EAAE;QAAE,OAAM;IAEvB,KAAK,MAAM,GAAG,IAAI,OAAO,CAAC,IAAI,EAAE;QAC/B,MAAM,SAAS,GAAG,oBAAoB,CAAC,GAAG,CAAC,CAAA;QAE3C,6BAA6B;QAC7B,IAAI,SAAS,KAAK,IAAI,IAAI,SAAS,CAAC,IAAI,KAAK,UAAU;YAAE,OAAM;QAE/D,sDAAsD;QACtD,MAAM,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACtC,MAAM,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAClC,MAAM,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QAExC,kEAAkE;QAClE,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;YAAE,OAAM;QAEpD,oCAAoC;QACpC,IAAI,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC;YAAE,OAAM;QAEtD,OAAO,EAAE,eAAe,EAAE,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAA;KACtG;IAED,OAAM;AACP,CAAC","sourcesContent":["import { Interface, id, TransactionReceipt, Eip1193Provider, EventEmitterable, Log, toQuantity } from 'ethers'\nimport { ERC20ABI } from './ERC20ABI.js'\n\nexport interface WithEip1193Provider {\n\tethereum: Eip1193Provider\n}\n\nexport type EthereumProviderEvents = 'chainChanged' | 'accountsChanged'\nexport type EthereumProvider = EventEmitterable<EthereumProviderEvents>\n\nexport function withEip1193Provider(global: unknown): global is WithEip1193Provider {\n\treturn global !== null && typeof global === 'object' && 'ethereum' in global && global.ethereum !== null && typeof global.ethereum === 'object' && 'request' in global.ethereum && typeof global.ethereum.request === 'function'\n}\n\nexport function isEthereumProvider(ethereum: unknown): ethereum is EthereumProvider {\n\treturn ethereum !== null && typeof ethereum === 'object' && 'on' in ethereum && typeof ethereum.on === 'function' && 'removeListener' in ethereum && typeof ethereum.removeListener === 'function'\n}\n\nexport const erc20Interface = new Interface(ERC20ABI)\nexport const transferSignature = id('Transfer(address,address,uint256)')\n\nexport const isTransferTopic = (topic: string) => topic === transferSignature\n\nexport const ERC20Interface = new Interface(ERC20ABI)\n\nexport const parseERC20ReceiptLog = ({ topics, data }: Log) => ERC20Interface.parseLog({ topics: [...topics], data })\n\nexport function extractERC20TransferRequest(receipt: TransactionReceipt) {\n\t// receipt should have a recipient\n\tif (!receipt.to) return\n\n\tfor (const log of receipt.logs) {\n\t\tconst parsedLog = parseERC20ReceiptLog(log)\n\n\t\t// log is a \"Transfer\" method\n\t\tif (parsedLog === null || parsedLog.name !== 'Transfer') return\n\n\t\t// if an arg was not defined, fail the next conditions\n\t\tconst logFrom = parsedLog.args[\"from\"]\n\t\tconst logTo = parsedLog.args[\"to\"]\n\t\tconst logValue = parsedLog.args[\"value\"]\n\n\t\t// a transfer that originates from which the receipt was initiated\n\t\tif (BigInt(logFrom) !== BigInt(receipt.from)) return\n\n\t\t// recipient is the contract address\n\t\tif (BigInt(receipt.to) !== BigInt(log.address)) return\n\n\t\treturn { contractAddress: log.address, from: receipt.from, to: logTo, quantity: toQuantity(logValue) }\n\t}\n\n\treturn\n}\n\n"]}