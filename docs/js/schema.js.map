{"version":3,"file":"schema.js","sourceRoot":"","sources":["../ts/schema.ts"],"names":[],"mappings":"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","sourcesContent":["import { getAddress, isError, isHexString, parseUnits } from 'ethers'\nimport * as funtypes from 'funtypes'\n\nexport function createCacheParser<T>(funType: funtypes.Codec<T>) {\n\tconst config: funtypes.ParsedValue<funtypes.String, T>['config'] = {\n\t\tparse(value) {\n\t\t\tconst jsonParsed = JSON.parse(value)\n\t\t\treturn funType.safeParse(jsonParsed)\n\t\t},\n\t\tserialize(value) {\n\t\t\tconst serializedValue = funType.safeSerialize(value)\n\t\t\tif (!serializedValue.success) return { success: false, message: serializedValue.message }\n\t\t\tconst jsonString = JSON.stringify(serializedValue.value)\n\t\t\treturn { success: true, value: jsonString }\n\t\t},\n\t}\n\treturn config\n}\n\nexport const BigIntParser: funtypes.ParsedValue<funtypes.String, bigint>['config'] = {\n\tparse(value) {\n\t\tif (!/^0x([a-fA-F0-9]{1,64})$/.test(value)) return { success: false, message: `${value} is not a hex string encoded number.` }\n\t\treturn { success: true, value: BigInt(value) }\n\t},\n\tserialize(value) {\n\t\tif (typeof value !== 'bigint') return { success: false, message: `${typeof value} is not a bigint.` } satisfies funtypes.Failure\n\t\treturn { success: true, value: `0x${value.toString(16)}` } satisfies funtypes.Success<string>\n\t},\n}\n\nexport const BigIntHex = funtypes.String.withParser(BigIntParser)\n\nexport const HexString = funtypes.String.withGuard(isHexString)\nexport type HexString = funtypes.Static<typeof HexString>\n\nexport function createUnitParser(decimals?: bigint): funtypes.ParsedValue<funtypes.String, HexString>['config'] {\n\treturn {\n\t\tparse(value) {\n\t\t\ttry {\n\t\t\t\tconst bigIntAmount = parseUnits(value, decimals)\n\t\t\t\tconst maybeHexAmount = BigIntHex.serialize(bigIntAmount)\n\t\t\t\treturn HexString.safeParse(maybeHexAmount)\n\t\t\t} catch {\n\t\t\t\treturn { success: false, message: `${value} is not a number.` }\n\t\t\t}\n\t\t},\n\t\tserialize: funtypes.String.safeParse,\n\t}\n}\n\nexport const AddressParser: funtypes.ParsedValue<funtypes.String, string>['config'] = {\n\tparse: value => {\n\t\ttry {\n\t\t\tconst checksummedAddress = getAddress(value)\n\t\t\treturn { success: true, value: checksummedAddress }\n\t\t} catch(error) {\n\t\t\tlet errorMessage =`${value} is not a valid address.`\n\t\t\tif (isError(error, 'INVALID_ARGUMENT') && error.message.includes('bad address checksum')) { errorMessage = 'Invalid address checksum.' }\n\t\t\treturn { success: false, message: errorMessage }\n\t\t}\n\t},\n\tserialize: funtypes.String.safeParse,\n}\n\nexport const EthereumAddress = funtypes.String.withParser(AddressParser).withGuard(isHexString)\nexport type EthereumAddress = funtypes.Static<typeof EthereumAddress>\n\nexport const ERC20Token = funtypes.Object({\n\tchainId: BigIntHex,\n\tname: funtypes.String,\n\taddress: EthereumAddress,\n\tsymbol: funtypes.String,\n\tdecimals: BigIntHex,\n})\n\nexport type ERC20Token = funtypes.Static<typeof ERC20Token>\n\nexport const TransferSchema = funtypes.Object({\n\thash: funtypes.String,\n\tfrom: EthereumAddress,\n\tto: EthereumAddress,\n\tamount: BigIntHex,\n\ttoken: ERC20Token.Or(funtypes.Undefined),\n\tdate: funtypes.Number,\n})\n\nexport type Transfer = funtypes.Static<typeof TransferSchema>\n\nexport const TransferRequestInput = funtypes.Object({\n\tto: EthereumAddress,\n\tamount: BigIntHex,\n\ttoken: ERC20Token.Or(funtypes.Undefined),\n})\n\nexport type TransferRequestInput = funtypes.Static<typeof TransferRequestInput>\n\nexport const TokensCacheSchema = funtypes.Union(\n\tfuntypes.Object({\n\t\tdata: funtypes.Array(ERC20Token),\n\t\tversion: funtypes.Literal('1.0.0'),\n\t})\n)\n\nexport type TokensCache = funtypes.Static<typeof TokensCacheSchema>\n\nexport const Holdings = funtypes.Array(EthereumAddress)\nexport type Holdings = funtypes.Static<typeof Holdings>\n\nconst AccountSettings = funtypes.Object({\n\taddress: EthereumAddress,\n\tholdings: Holdings\n})\n\nexport type AccountSettings = funtypes.Static<typeof AccountSettings>\n\nexport const SettingsCacheSchema = funtypes.Union(\n\tfuntypes.Object({\n\t\tdata: funtypes.Array(AccountSettings),\n\t\tversion: funtypes.Literal('1.0.0'),\n\t})\n)\n\nexport type SettingsCache = funtypes.Static<typeof SettingsCacheSchema>\n\nexport function serialize<T, U extends funtypes.Codec<T>>(funType: U, value: T) {\n\treturn funType.serialize(value) as ToWireType<U>\n}\n\nexport function safeSerialize<T, U extends funtypes.Codec<T>>(funType: U, value: T) {\n\treturn funType.safeSerialize(value) as funtypes.Result<ToWireType<U>>\n}\n\nexport type UnionToIntersection<T> = (T extends unknown ? (k: T) => void : never) extends (k: infer I) => void ? I : never\n\nexport type ToWireType<T> = T extends funtypes.Intersect<infer U>\n\t? UnionToIntersection<{ [I in keyof U]: ToWireType<U[I]> }[number]>\n\t: T extends funtypes.Union<infer U>\n\t? { [I in keyof U]: ToWireType<U[I]> }[number]\n\t: T extends funtypes.Record<infer U, infer V>\n\t? Record<funtypes.Static<U>, ToWireType<V>>\n\t: T extends funtypes.Partial<infer U, infer V>\n\t? V extends true\n\t? { readonly [K in keyof U]?: ToWireType<U[K]> }\n\t: { [K in keyof U]?: ToWireType<U[K]> }\n\t: T extends funtypes.Object<infer U, infer V>\n\t? V extends true\n\t? { readonly [K in keyof U]: ToWireType<U[K]> }\n\t: { [K in keyof U]: ToWireType<U[K]> }\n\t: T extends funtypes.Readonly<funtypes.Tuple<infer U>>\n\t? { readonly [P in keyof U]: ToWireType<U[P]> }\n\t: T extends funtypes.Tuple<infer U>\n\t? { [P in keyof U]: ToWireType<U[P]> }\n\t: T extends funtypes.ReadonlyArray<infer U>\n\t? readonly ToWireType<U>[]\n\t: T extends funtypes.Array<infer U>\n\t? ToWireType<U>[]\n\t: T extends funtypes.ParsedValue<infer U, infer _>\n\t? ToWireType<U>\n\t: T extends funtypes.Codec<infer U>\n\t? U\n\t: never\n\nexport const TransferRequest = funtypes.Object({\n\tcontractAddress: EthereumAddress.Or(funtypes.Undefined),\n\tfrom: EthereumAddress,\n\tto: EthereumAddress,\n\tquantity: BigIntHex\n})\n\nexport type TransferRequest = funtypes.Static<typeof TransferRequest>\n\nexport const TransferTemplate = funtypes.Intersect(TransferRequest, funtypes.Object({ label: funtypes.String.Or(funtypes.Undefined) }))\nexport type TransferTemplate = funtypes.Static<typeof TransferTemplate>\n\nexport const TemplatesCacheSchema = funtypes.Union(\n\tfuntypes.Object({\n\t\tdata: funtypes.Array(TransferTemplate),\n\t\tversion: funtypes.Literal('1.0.0'),\n\t})\n)\n\nexport type TemplatesCache = funtypes.Static<typeof TemplatesCacheSchema>\n"]}