{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../ts/store/transaction.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAA;AACjD,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAA;AACxC,OAAO,EAAE,aAAa,EAAE,MAAM,gCAAgC,CAAA;AAE9D,OAAO,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAA;AAE5D,MAAM,UAAU,cAAc,CAAC,eAAuB;IACrD,MAAM,EAAE,eAAe,EAAE,GAAG,mBAAmB,EAAE,CAAA;IACjD,MAAM,EAAE,KAAK,EAAE,mBAAmB,EAAE,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,aAAa,EAAE,GAAG,aAAa,EAAuB,CAAA;IAC3H,MAAM,EAAE,KAAK,EAAE,kBAAkB,EAAE,OAAO,EAAE,cAAc,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,aAAa,EAA6B,CAAA;IAE9H,MAAM,sBAAsB,GAAG,CAAC,eAAuB,EAAE,EAAE;QAC1D,IAAI,CAAC,eAAe,CAAC,KAAK;YAAE,OAAM;QAClC,MAAM,QAAQ,GAAG,eAAe,CAAC,KAAK,CAAA;QACtC,eAAe,CAAC,KAAK,IAAI,EAAE;YAC1B,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAA;YAC7D,0CAA0C;YAC1C,IAAI,MAAM,KAAK,IAAI;gBAAE,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAA;YAC3E,OAAO,MAAM,CAAA;QACd,CAAC,CAAC,CAAA;IACH,CAAC,CAAA;IAED,MAAM,qBAAqB,GAAG,CAAC,UAA+B,EAAE,EAAE;QACjE,cAAc,CAAC,KAAK,IAAI,EAAE;YACzB,OAAO,MAAM,UAAU,CAAC,IAAI,EAAE,CAAA;QAC/B,CAAC,CAAC,CAAA;IACH,CAAC,CAAA;IAED,wCAAwC;IACxC,eAAe,CAAC,GAAG,EAAE;QACpB,IAAI,mBAAmB,CAAC,KAAK,CAAC,KAAK,KAAK,UAAU;YAAE,OAAM;QAC1D,qBAAqB,CAAC,mBAAmB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;IACvD,CAAC,CAAC,CAAA;IAEF,qBAAqB;IACrB,SAAS,CAAC,GAAG,EAAE;QACd,YAAY,EAAE,CAAA;QACd,sBAAsB,CAAC,eAAe,CAAC,CAAA;IACxC,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC,CAAA;IAErB,OAAO,EAAE,mBAAmB,EAAE,kBAAkB,EAAE,KAAK,EAAE,aAAa,EAAE,CAAA;AACzE,CAAC","sourcesContent":["import { useSignalEffect } from '@preact/signals'\nimport { useEffect } from 'preact/hooks'\nimport { useAsyncState } from '../library/preact-utilities.js'\nimport { TransactionReceipt, TransactionResponse } from 'ethers'\nimport { useEthereumProvider } from '../context/Ethereum.js'\n\nexport function useTransaction(transactionHash: string) {\n\tconst { browserProvider } = useEthereumProvider()\n\tconst { value: transactionResponse, waitFor: waitForResponse, reset: resetResponse } = useAsyncState<TransactionResponse>()\n\tconst { value: transactionReceipt, waitFor: waitForReceipt, reset: resetReceipt } = useAsyncState<TransactionReceipt | null>()\n\n\tconst getTransactionResponse = (transactionHash: string) => {\n\t\tif (!browserProvider.value) return\n\t\tconst provider = browserProvider.value\n\t\twaitForResponse(async () => {\n\t\t\tconst result = await provider.getTransaction(transactionHash)\n\t\t\t// TransactionResult can actually be null?\n\t\t\tif (result === null) throw new Error('Transaction was not found on chain!')\n\t\t\treturn result\n\t\t})\n\t}\n\n\tconst getTransactionReceipt = (txResponse: TransactionResponse) => {\n\t\twaitForReceipt(async () => {\n\t\t\treturn await txResponse.wait()\n\t\t})\n\t}\n\n\t// automatically get transaction receipt\n\tuseSignalEffect(() => {\n\t\tif (transactionResponse.value.state !== 'resolved') return\n\t\tgetTransactionReceipt(transactionResponse.value.value)\n\t})\n\n\t// reset async states\n\tuseEffect(() => {\n\t\tresetReceipt()\n\t\tgetTransactionResponse(transactionHash)\n\t}, [transactionHash])\n\n\treturn { transactionResponse, transactionReceipt, reset: resetResponse }\n}\n"]}