{"version":3,"file":"signals-core.min.js","sources":["dependencies://dependencies/@preact/signals-core/src/index.ts"],"sourcesContent":["function cycleDetected(): never {\n\tthrow new Error(\"Cycle detected\");\n}\n\n// Flags for Computed and Effect.\nconst RUNNING = 1 << 0;\nconst NOTIFIED = 1 << 1;\nconst OUTDATED = 1 << 2;\nconst DISPOSED = 1 << 3;\nconst HAS_ERROR = 1 << 4;\nconst TRACKING = 1 << 5;\n\n// Flags for Nodes.\nconst NODE_FREE = 1 << 0;\nconst NODE_SUBSCRIBED = 1 << 1;\n\n// A linked list node used to track dependencies (sources) and dependents (targets).\n// Also used to remember the source's last version number that the target saw.\ntype Node = {\n\t// A node may have the following flags:\n\t//  NODE_FREE when it's unclear whether the source is still a dependency of the target\n\t//  NODE_SUBSCRIBED when the target has subscribed to listen change notifications from the source\n\t_flags: number;\n\n\t// A source whose value the target depends on.\n\t_source: Signal;\n\t_prevSource?: Node;\n\t_nextSource?: Node;\n\n\t// A target that depends on the source and should be notified when the source changes.\n\t_target: Computed | Effect;\n\t_prevTarget?: Node;\n\t_nextTarget?: Node;\n\n\t// The version number of the source that target has last seen. We use version numbers\n\t// instead of storing the source value, because source values can take arbitrary amount\n\t// of memory, and computeds could hang on to them forever because they're lazily evaluated.\n\t_version: number;\n\n\t// Used to remember & roll back the source's previous `._node` value when entering &\n\t// exiting a new evaluation context.\n\t_rollbackNode?: Node;\n};\n\nfunction startBatch() {\n\tbatchDepth++;\n}\n\nfunction endBatch() {\n\tif (batchDepth > 1) {\n\t\tbatchDepth--;\n\t\treturn;\n\t}\n\n\tlet error: unknown;\n\tlet hasError = false;\n\n\twhile (batchedEffect !== undefined) {\n\t\tlet effect: Effect | undefined = batchedEffect;\n\t\tbatchedEffect = undefined;\n\n\t\tbatchIteration++;\n\n\t\twhile (effect !== undefined) {\n\t\t\tconst next: Effect | undefined = effect._nextBatchedEffect;\n\t\t\teffect._nextBatchedEffect = undefined;\n\t\t\teffect._flags &= ~NOTIFIED;\n\n\t\t\tif (\n\t\t\t\t!(effect._flags & DISPOSED) &&\n\t\t\t\teffect._flags & OUTDATED &&\n\t\t\t\tneedsToRecompute(effect)\n\t\t\t) {\n\t\t\t\ttry {\n\t\t\t\t\teffect._callback();\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (!hasError) {\n\t\t\t\t\t\terror = err;\n\t\t\t\t\t\thasError = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\teffect = next;\n\t\t}\n\t}\n\tbatchIteration = 0;\n\tbatchDepth--;\n\n\tif (hasError) {\n\t\tthrow error;\n\t}\n}\n\nfunction batch<T>(callback: () => T): T {\n\tif (batchDepth > 0) {\n\t\treturn callback();\n\t}\n\t/*@__INLINE__**/ startBatch();\n\ttry {\n\t\treturn callback();\n\t} finally {\n\t\tendBatch();\n\t}\n}\n\n// Currently evaluated computed or effect.\nlet evalContext: Computed | Effect | undefined = undefined;\n\n// Effects collected into a batch.\nlet batchedEffect: Effect | undefined = undefined;\nlet batchDepth = 0;\nlet batchIteration = 0;\n\n// A global version number for signals, used for fast-pathing repeated\n// computed.peek()/computed.value calls when nothing has changed globally.\nlet globalVersion = 0;\n\nfunction addDependency(signal: Signal): Node | undefined {\n\tif (evalContext === undefined) {\n\t\treturn undefined;\n\t}\n\n\tlet node = signal._node;\n\tif (node === undefined || node._target !== evalContext) {\n\t\t// `signal` is a new dependency. Create a new node dependency node, move it\n\t\t//  to the front of the current context's dependency list.\n\t\tnode = {\n\t\t\t_flags: 0,\n\t\t\t_version: 0,\n\t\t\t_source: signal,\n\t\t\t_prevSource: undefined,\n\t\t\t_nextSource: evalContext._sources,\n\t\t\t_target: evalContext,\n\t\t\t_prevTarget: undefined,\n\t\t\t_nextTarget: undefined,\n\t\t\t_rollbackNode: node,\n\t\t};\n\t\tevalContext._sources = node;\n\t\tsignal._node = node;\n\n\t\t// Subscribe to change notifications from this dependency if we're in an effect\n\t\t// OR evaluating a computed signal that in turn has subscribers.\n\t\tif (evalContext._flags & TRACKING) {\n\t\t\tsignal._subscribe(node);\n\t\t}\n\t\treturn node;\n\t} else if (node._flags & NODE_FREE) {\n\t\t// `signal` is an existing dependency from a previous evaluation. Reuse the dependency\n\t\t// node and move it to the front of the evaluation context's dependency list.\n\t\tnode._flags &= ~NODE_FREE;\n\n\t\tconst head = evalContext._sources;\n\t\tif (node !== head) {\n\t\t\tconst prev = node._prevSource;\n\t\t\tconst next = node._nextSource;\n\t\t\tif (prev !== undefined) {\n\t\t\t\tprev._nextSource = next;\n\t\t\t}\n\t\t\tif (next !== undefined) {\n\t\t\t\tnext._prevSource = prev;\n\t\t\t}\n\t\t\tif (head !== undefined) {\n\t\t\t\thead._prevSource = node;\n\t\t\t}\n\t\t\tnode._prevSource = undefined;\n\t\t\tnode._nextSource = head;\n\t\t\tevalContext._sources = node;\n\t\t}\n\n\t\t// We can assume that the currently evaluated effect / computed signal is already\n\t\t// subscribed to change notifications from `signal` if needed.\n\t\treturn node;\n\t}\n\treturn undefined;\n}\n\ndeclare class Signal<T = any> {\n\t/** @internal */\n\t_value: unknown;\n\n\t/** @internal */\n\t_version: number;\n\n\t/** @internal */\n\t_node?: Node;\n\n\t/** @internal */\n\t_targets?: Node;\n\n\tconstructor(value?: T);\n\n\t/** @internal */\n\t_refresh(): boolean;\n\n\t/** @internal */\n\t_subscribe(node: Node): void;\n\n\t/** @internal */\n\t_unsubscribe(node: Node): void;\n\n\tsubscribe(fn: (value: T) => void): () => void;\n\n\tvalueOf(): T;\n\n\ttoString(): string;\n\n\tpeek(): T;\n\n\tget value(): T;\n\tset value(value: T);\n}\n\n/** @internal */\nfunction Signal(this: Signal, value?: unknown) {\n\tthis._value = value;\n\tthis._version = 0;\n\tthis._node = undefined;\n\tthis._targets = undefined;\n}\n\nSignal.prototype._refresh = function () {\n\treturn true;\n};\n\nSignal.prototype._subscribe = function (node) {\n\tif (!(node._flags & NODE_SUBSCRIBED)) {\n\t\tnode._flags |= NODE_SUBSCRIBED;\n\t\tnode._nextTarget = this._targets;\n\n\t\tif (this._targets !== undefined) {\n\t\t\tthis._targets._prevTarget = node;\n\t\t}\n\t\tthis._targets = node;\n\t}\n};\n\nSignal.prototype._unsubscribe = function (node) {\n\tif (node._flags & NODE_SUBSCRIBED) {\n\t\tnode._flags &= ~NODE_SUBSCRIBED;\n\n\t\tconst prev = node._prevTarget;\n\t\tconst next = node._nextTarget;\n\t\tif (prev !== undefined) {\n\t\t\tprev._nextTarget = next;\n\t\t\tnode._prevTarget = undefined;\n\t\t}\n\t\tif (next !== undefined) {\n\t\t\tnext._prevTarget = prev;\n\t\t\tnode._nextTarget = undefined;\n\t\t}\n\t\tif (node === this._targets) {\n\t\t\tthis._targets = next;\n\t\t}\n\t}\n};\n\nSignal.prototype.subscribe = function (fn) {\n\tconst signal = this;\n\treturn effect(function (this: Effect) {\n\t\tconst value = signal.value;\n\t\tconst flag = this._flags & TRACKING;\n\t\tthis._flags &= ~TRACKING;\n\t\ttry {\n\t\t\tfn(value);\n\t\t} finally {\n\t\t\tthis._flags |= flag;\n\t\t}\n\t});\n};\n\nSignal.prototype.valueOf = function () {\n\treturn this.value;\n};\n\nSignal.prototype.toString = function () {\n\treturn this.value + \"\";\n};\n\nSignal.prototype.peek = function () {\n\treturn this._value;\n};\n\nObject.defineProperty(Signal.prototype, \"value\", {\n\tget() {\n\t\tconst node = addDependency(this);\n\t\tif (node !== undefined) {\n\t\t\tnode._version = this._version;\n\t\t}\n\t\treturn this._value;\n\t},\n\tset(value) {\n\t\tif (value !== this._value) {\n\t\t\tif (batchIteration > 100) {\n\t\t\t\tcycleDetected();\n\t\t\t}\n\n\t\t\tthis._value = value;\n\t\t\tthis._version++;\n\t\t\tglobalVersion++;\n\n\t\t\t/**@__INLINE__*/ startBatch();\n\t\t\ttry {\n\t\t\t\tfor (\n\t\t\t\t\tlet node = this._targets;\n\t\t\t\t\tnode !== undefined;\n\t\t\t\t\tnode = node._nextTarget\n\t\t\t\t) {\n\t\t\t\t\tnode._target._notify();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tendBatch();\n\t\t\t}\n\t\t}\n\t},\n});\n\nfunction signal<T>(value: T): Signal<T> {\n\treturn new Signal(value);\n}\n\nfunction needsToRecompute(target: Computed | Effect): boolean {\n\t// Check the dependencies for changed values. The dependency list is already\n\t// in order of use. Therefore if multiple dependencies have changed values, only\n\t// the first used dependency is re-evaluated at this point.\n\tlet node = target._sources;\n\twhile (node !== undefined) {\n\t\t// If there's a new version of the dependency before or after refreshing,\n\t\t// or the dependency has something blocking it from refreshing at all (e.g. a\n\t\t// dependency cycle), then we need to recompute.\n\t\tif (\n\t\t\tnode._source._version !== node._version ||\n\t\t\t!node._source._refresh() ||\n\t\t\tnode._source._version !== node._version\n\t\t) {\n\t\t\tbreak;\n\t\t}\n\t\tnode = node._nextSource;\n\t}\n\t// If none of the dependencies have changed values since last recompute then the\n\t// there's no need to recompute.\n\treturn node !== undefined;\n}\n\nfunction prepareSources(target: Computed | Effect) {\n\tfor (\n\t\tlet node = target._sources;\n\t\tnode !== undefined;\n\t\tnode = node._nextSource\n\t) {\n\t\tconst rollbackNode = node._source._node;\n\t\tif (rollbackNode !== undefined) {\n\t\t\tnode._rollbackNode = rollbackNode;\n\t\t}\n\t\tnode._source._node = node;\n\t\tnode._flags |= NODE_FREE;\n\t}\n}\n\nfunction cleanupSources(target: Computed | Effect) {\n\t// At this point target._sources is a mishmash of current & former dependencies.\n\t// The current dependencies are also in a reverse order of use.\n\t// Therefore build a new, reverted list of dependencies containing only the current\n\t// dependencies in a proper order of use.\n\t// Drop former dependencies from the list and unsubscribe from their change notifications.\n\n\tlet node = target._sources;\n\tlet sources = undefined;\n\twhile (node !== undefined) {\n\t\tconst next = node._nextSource;\n\t\tif (node._flags & NODE_FREE) {\n\t\t\tnode._source._unsubscribe(node);\n\t\t\tnode._nextSource = undefined;\n\t\t} else {\n\t\t\tif (sources !== undefined) {\n\t\t\t\tsources._prevSource = node;\n\t\t\t}\n\t\t\tnode._prevSource = undefined;\n\t\t\tnode._nextSource = sources;\n\t\t\tsources = node;\n\t\t}\n\n\t\tnode._source._node = node._rollbackNode;\n\t\tif (node._rollbackNode !== undefined) {\n\t\t\tnode._rollbackNode = undefined;\n\t\t}\n\t\tnode = next;\n\t}\n\ttarget._sources = sources;\n}\n\ndeclare class Computed<T = any> extends Signal<T> {\n\t_compute: () => T;\n\t_sources?: Node;\n\t_globalVersion: number;\n\t_flags: number;\n\n\tconstructor(compute: () => T);\n\n\t_notify(): void;\n\tget value(): T;\n}\n\nfunction Computed(this: Computed, compute: () => unknown) {\n\tSignal.call(this, undefined);\n\n\tthis._compute = compute;\n\tthis._sources = undefined;\n\tthis._globalVersion = globalVersion - 1;\n\tthis._flags = OUTDATED;\n}\n\nComputed.prototype = new Signal() as Computed;\n\nComputed.prototype._refresh = function () {\n\tthis._flags &= ~NOTIFIED;\n\n\tif (this._flags & RUNNING) {\n\t\treturn false;\n\t}\n\n\t// If this computed signal has subscribed to updates from its dependencies\n\t// (TRACKING flag set) and none of them have notified about changes (OUTDATED\n\t// flag not set), then the computed value can't have changed.\n\tif ((this._flags & (OUTDATED | TRACKING)) === TRACKING) {\n\t\treturn true;\n\t}\n\tthis._flags &= ~OUTDATED;\n\n\tif (this._globalVersion === globalVersion) {\n\t\treturn true;\n\t}\n\tthis._globalVersion = globalVersion;\n\n\t// Mark this computed signal running before checking the dependencies for value\n\t// changes, so that the RUNNIN flag can be used to notice cyclical dependencies.\n\tthis._flags |= RUNNING;\n\tif (this._version > 0 && !needsToRecompute(this)) {\n\t\tthis._flags &= ~RUNNING;\n\t\treturn true;\n\t}\n\n\tconst prevContext = evalContext;\n\ttry {\n\t\tprepareSources(this);\n\t\tevalContext = this;\n\t\tconst value = this._compute();\n\t\tif (\n\t\t\tthis._flags & HAS_ERROR ||\n\t\t\tthis._value !== value ||\n\t\t\tthis._version === 0\n\t\t) {\n\t\t\tthis._value = value;\n\t\t\tthis._flags &= ~HAS_ERROR;\n\t\t\tthis._version++;\n\t\t}\n\t} catch (err) {\n\t\tthis._value = err;\n\t\tthis._flags |= HAS_ERROR;\n\t\tthis._version++;\n\t}\n\tevalContext = prevContext;\n\tcleanupSources(this);\n\tthis._flags &= ~RUNNING;\n\treturn true;\n};\n\nComputed.prototype._subscribe = function (node) {\n\tif (this._targets === undefined) {\n\t\tthis._flags |= OUTDATED | TRACKING;\n\n\t\t// A computed signal subscribes lazily to its dependencies when the it\n\t\t// gets its first subscriber.\n\t\tfor (\n\t\t\tlet node = this._sources;\n\t\t\tnode !== undefined;\n\t\t\tnode = node._nextSource\n\t\t) {\n\t\t\tnode._source._subscribe(node);\n\t\t}\n\t}\n\tSignal.prototype._subscribe.call(this, node);\n};\n\nComputed.prototype._unsubscribe = function (node) {\n\tSignal.prototype._unsubscribe.call(this, node);\n\n\t// Computed signal unsubscribes from its dependencies from it loses its last subscriber.\n\tif (this._targets === undefined) {\n\t\tthis._flags &= ~TRACKING;\n\n\t\tfor (\n\t\t\tlet node = this._sources;\n\t\t\tnode !== undefined;\n\t\t\tnode = node._nextSource\n\t\t) {\n\t\t\tnode._source._unsubscribe(node);\n\t\t}\n\t}\n};\n\nComputed.prototype._notify = function () {\n\tif (!(this._flags & NOTIFIED)) {\n\t\tthis._flags |= OUTDATED | NOTIFIED;\n\n\t\tfor (\n\t\t\tlet node = this._targets;\n\t\t\tnode !== undefined;\n\t\t\tnode = node._nextTarget\n\t\t) {\n\t\t\tnode._target._notify();\n\t\t}\n\t}\n};\n\nComputed.prototype.peek = function () {\n\tif (!this._refresh()) {\n\t\tcycleDetected();\n\t}\n\tif (this._flags & HAS_ERROR) {\n\t\tthrow this._value;\n\t}\n\treturn this._value;\n};\n\nObject.defineProperty(Computed.prototype, \"value\", {\n\tget() {\n\t\tif (this._flags & RUNNING) {\n\t\t\tcycleDetected();\n\t\t}\n\t\tconst node = addDependency(this);\n\t\tthis._refresh();\n\t\tif (node !== undefined) {\n\t\t\tnode._version = this._version;\n\t\t}\n\t\tif (this._flags & HAS_ERROR) {\n\t\t\tthrow this._value;\n\t\t}\n\t\treturn this._value;\n\t},\n});\n\ninterface ReadonlySignal<T = any> extends Signal<T> {\n\treadonly value: T;\n}\n\nfunction computed<T>(compute: () => T): ReadonlySignal<T> {\n\treturn new Computed(compute);\n}\n\nfunction cleanupEffect(effect: Effect) {\n\tconst cleanup = effect._cleanup;\n\teffect._cleanup = undefined;\n\n\tif (typeof cleanup === \"function\") {\n\t\t/*@__INLINE__**/ startBatch();\n\n\t\t// Run cleanup functions always outside of any context.\n\t\tconst prevContext = evalContext;\n\t\tevalContext = undefined;\n\t\ttry {\n\t\t\tcleanup();\n\t\t} catch (err) {\n\t\t\teffect._flags &= ~RUNNING;\n\t\t\teffect._flags |= DISPOSED;\n\t\t\tdisposeEffect(effect);\n\t\t\tthrow err;\n\t\t} finally {\n\t\t\tevalContext = prevContext;\n\t\t\tendBatch();\n\t\t}\n\t}\n}\n\nfunction disposeEffect(effect: Effect) {\n\tfor (\n\t\tlet node = effect._sources;\n\t\tnode !== undefined;\n\t\tnode = node._nextSource\n\t) {\n\t\tnode._source._unsubscribe(node);\n\t}\n\teffect._compute = undefined;\n\teffect._sources = undefined;\n\n\tcleanupEffect(effect);\n}\n\nfunction endEffect(this: Effect, prevContext?: Computed | Effect) {\n\tif (evalContext !== this) {\n\t\tthrow new Error(\"Out-of-order effect\");\n\t}\n\tcleanupSources(this);\n\tevalContext = prevContext;\n\n\tthis._flags &= ~RUNNING;\n\tif (this._flags & DISPOSED) {\n\t\tdisposeEffect(this);\n\t}\n\tendBatch();\n}\n\ndeclare class Effect {\n\t_compute?: () => unknown;\n\t_cleanup?: unknown;\n\t_sources?: Node;\n\t_nextBatchedEffect?: Effect;\n\t_flags: number;\n\n\tconstructor(compute: () => void);\n\n\t_callback(): void;\n\t_start(): () => void;\n\t_notify(): void;\n\t_dispose(): void;\n}\n\nfunction Effect(this: Effect, compute: () => void) {\n\tthis._compute = compute;\n\tthis._cleanup = undefined;\n\tthis._sources = undefined;\n\tthis._nextBatchedEffect = undefined;\n\tthis._flags = OUTDATED | TRACKING;\n}\n\nEffect.prototype._callback = function () {\n\tconst finish = this._start();\n\ttry {\n\t\tif (!(this._flags & DISPOSED) && this._compute !== undefined) {\n\t\t\tthis._cleanup = this._compute();\n\t\t}\n\t} finally {\n\t\tfinish();\n\t}\n};\n\nEffect.prototype._start = function () {\n\tif (this._flags & RUNNING) {\n\t\tcycleDetected();\n\t}\n\tthis._flags |= RUNNING;\n\tthis._flags &= ~DISPOSED;\n\tcleanupEffect(this);\n\tprepareSources(this);\n\n\t/*@__INLINE__**/ startBatch();\n\tthis._flags &= ~OUTDATED;\n\tconst prevContext = evalContext;\n\tevalContext = this;\n\treturn endEffect.bind(this, prevContext);\n};\n\nEffect.prototype._notify = function () {\n\tif (!(this._flags & NOTIFIED)) {\n\t\tthis._flags |= NOTIFIED | OUTDATED;\n\t\tthis._nextBatchedEffect = batchedEffect;\n\t\tbatchedEffect = this;\n\t}\n};\n\nEffect.prototype._dispose = function () {\n\tthis._flags |= DISPOSED;\n\n\tif (!(this._flags & RUNNING)) {\n\t\tdisposeEffect(this);\n\t}\n};\n\nfunction effect(compute: () => unknown): () => void {\n\tconst effect = new Effect(compute);\n\teffect._callback();\n\t// Return a bound function instead of a wrapper like `() => effect._dispose()`,\n\t// because bound functions seem to be just as fast and take up a lot less memory.\n\treturn effect._dispose.bind(effect);\n}\n\nexport { signal, computed, effect, batch, Signal, ReadonlySignal };\n"],"names":["g","f","exports","module","define","amd","globalThis","self","preactSignalsCore","this","cycleDetected","Error","endBatch","batchDepth","error","hasError","undefined","batchedEffect","_effect","batchIteration","effect","next","_nextBatchedEffect","_flags","needsToRecompute","_callback","err","evalContext","globalVersion","signal","node","_node","_target","_sources","_version","_source","_prevSource","_nextSource","_prevTarget","_nextTarget","_rollbackNode","_subscribe","head","prev","Signal","value","_value","_targets","prototype","_refresh","_unsubscribe","subscribe","fn","flag","valueOf","toString","peek","Object","defineProperty","get","addDependency","set","_notify","target","prepareSources","rollbackNode","cleanupSources","sources","Computed","compute","call","_compute","_globalVersion","OUTDATED","prevContext","_node2","cleanupEffect","cleanup","_cleanup","disposeEffect","endEffect","Effect","finish","_start","bind","NOTIFIED","_dispose","batch","callback","computed"],"mappings":"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"}